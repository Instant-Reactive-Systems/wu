@import "tailwindcss";

@custom-variant dark (&:where(.dark, .dark *));

:root {
  color-scheme: light;
}

html.dark {
  color-scheme: dark;
}

@theme inline {
	/* wu.theme */
	/* surface */
	--color-light-1: oklch(0.9015 0.015 273.83);
	--color-light-2: oklch(0.8769 0.018 272.29);
	--color-light-3: oklch(0.7995 0.031 271.01);
	--color-light-4: oklch(0.6439 0.057 270.73);
	--color-dark-1: oklch(0.2986 0.049 270.23);
	--color-dark-2: oklch(0.3395 0.058 269.92);
	--color-dark-3: oklch(0.3939 0.068 269.10);
	--color-dark-4: oklch(0.4448 0.081 269.72);
	--color-content-light-emph: oklch(0.1774 0.000 269.52);
	--color-content-light-noemph: --alpha(var(--color-content-light-emph) / 50%);
	--color-content-light-sideinfo: --alpha(var(--color-content-light-emph) / 35%);
	--color-content-dark-emph: oklch(0.9015 0.015 273.83);
	--color-content-dark-noemph: --alpha(var(--color-content-dark-emph) / 50%);
	--color-content-dark-sideinfo: --alpha(var(--color-content-dark-emph) / 35%);
	--color-content-emph: light-dark(var(--color-content-light-emph), var(--color-content-dark-emph));
	--color-content-noemph: light-dark(var(--color-content-light-noemph), var(--color-content-dark-noemph));
	--color-content-sideinfo: light-dark(var(--color-content-light-sideinfo), var(--color-content-dark-sideinfo));
	--color-surface-1: light-dark(var(--color-light-1), var(--color-dark-1));
	--color-surface-2: light-dark(var(--color-light-2), var(--color-dark-2));
	--color-surface-3: light-dark(var(--color-light-3), var(--color-dark-3));
	--color-surface-4: light-dark(var(--color-light-4), var(--color-dark-4));
	--color-surface-content: var(--color-content-emph);
	/* primary */
	--color-primary: oklch(0.6984 0.150 162.22);
	--color-primary-darker: oklch(0.5671 0.121 162.60);
	--color-primary-darkest: oklch(0.4182 0.087 163.43);
	--color-primary-content: var(--color-content-light-emph);
	--color-highlight: var(--color-primary);
	--color-highlight-content: var(--color-content-light-emph);
	/* secondary */
	--color-secondary: oklch(0.5106 0.230 276.97);
	--color-secondary-darker: oklch(0.4178 0.182 277.24);
	--color-secondary-darkest: oklch(0.3133 0.129 278.71);
	--color-secondary-content: var(--color-content-dark-emph);
	/* tertiary */
	--color-tertiary: oklch(0.6847 0.148 237.32);
	--color-tertiary-darker: oklch(0.5556 0.118 236.77);
	--color-tertiary-darkest: oklch(0.4113 0.085 235.45);
	--color-tertiary-content: var(--color-content-dark-emph);
	/* success */
	--color-success-50: oklch(0.9615 0.037 123.68);
	--color-success-100: oklch(0.9494 0.051 125.35);
	--color-success-200: oklch(0.9363 0.062 125.32);
	--color-success-300: oklch(0.9015 0.1 125.93);
	--color-success-400: oklch(0.8306 0.165 127.66);
	--color-success-500: oklch(0.7681 0.204 130.85);
	--color-success-600: oklch(0.7115 0.189 130.79);
	--color-success-700: oklch(0.6215 0.164 130.64);
	--color-success-800: oklch(0.5280 0.138 130.38);
	--color-success-900: oklch(0.4593 0.118 130.07);
	--color-success-content: var(--color-content-light-emph);
	/* warning */
	--color-warning-50: oklch(0.9666 0.035 92.82);
	--color-warning-100: oklch(0.9551 0.046 92.18);
	--color-warning-200: oklch(0.9435 0.058 92.14);
	--color-warning-300: oklch(0.9120 0.09 92.46);
	--color-warning-400: oklch(0.8502 0.142 91.37);
	--color-warning-500: oklch(0.7952 0.162 86.05);
	--color-warning-600: oklch(0.7355 0.149 85.97);
	--color-warning-700: oklch(0.6429 0.13 86.07);
	--color-warning-800: oklch(0.5458 0.11 86.87);
	--color-warning-900: oklch(0.4751 0.096 87.46);
	--color-warning-content: var(--color-content-light-emph);
	/* error */
	--color-error-50: oklch(0.9242 0.035 348.04);
	--color-error-100: oklch(0.8974 0.048 345.77);
	--color-error-200: oklch(0.8732 0.06 346.85);
	--color-error-300: oklch(0.7988 0.1 348.56);
	--color-error-400: oklch(0.6656 0.176 352.05);
	--color-error-500: oklch(0.5722 0.222 358.6);
	--color-error-600: oklch(0.5300 0.204 358.58);
	--color-error-700: oklch(0.4642 0.178 357.85);
	--color-error-800: oklch(0.3956 0.15 357.41);
	--color-error-900: oklch(0.3445 0.129 356.99);
	--color-error-content: var(--color-content-dark-emph);

	/* wu.screens */
	/* --breakpoint-*: initial; */

	/* wu.shadow */
	--shadow-left: -1px 0 3px 0 rgba(0 0 0 / 0.1), -1px 0 2px -1px rgb(0 0 0 / 0.1);
	--shadow-left-sm: -1px 0 2px 0 rgb(0 0 0 / 0.05);
	--shadow-left-md: -4px 0 6px -1px rgb(0 0 0 / 0.1), -2px 0 4px -2px rgb(0 0 0 / 0.1);
	--shadow-left-lg: -10px 0 15px -3px rgb(0 0 0 / 0.1), -4px 0 6px -4px rgb(0 0 0 / 0.1);
	--shadow-left-xl: -20px 0 25px -5px rgb(0 0 0 / 0.1), -8px 0 10px -6px rgb(0 0 0 / 0.1);
	--shadow-left-2xl: -25px 0 50px -12px rgb(0 0 0 / 0.25);
	--shadow-right: 1px 0 3px 0 rgba(0 0 0 / 0.1), 1px 0 2px -1px rgb(0 0 0 / 0.1);
	--shadow-right-sm: 1px 0 2px 0 rgb(0 0 0 / 0.05);
	--shadow-right-md: 4px 0 6px -1px rgb(0 0 0 / 0.1), 2px 0 4px -2px rgb(0 0 0 / 0.1);
	--shadow-right-lg: 10px 0 15px -3px rgb(0 0 0 / 0.1), 4px 0 6px -4px rgb(0 0 0 / 0.1);
	--shadow-right-xl: 20px 0 25px -5px rgb(0 0 0 / 0.1), 8px 0 10px -6px rgb(0 0 0 / 0.1);
	--shadow-right-2xl: 25px 0 50px -12px rgb(0 0 0 / 0.25);
	--shadow-top: 0 -1px 3px 0 rgba(0 0 0 / 0.1), 0 -1px 2px -1px rgb(0 0 0 / 0.1);
	--shadow-top-sm: 0 -1px 2px 0 rgb(0 0 0 / 0.05);
	--shadow-top-md: 0 -4px 6px -1px rgb(0 0 0 / 0.1), 0 -2px 4px -2px rgb(0 0 0 / 0.1);
	--shadow-top-lg: 0 -10px 15px -3px rgb(0 0 0 / 0.1), 0 -4px 6px -4px rgb(0 0 0 / 0.1);
	--shadow-top-xl: 0 -20px 25px -5px rgb(0 0 0 / 0.1), 0 -8px 10px -6px rgb(0 0 0 / 0.1);
	--shadow-top-2xl: 0 -25px 50px -12px rgb(0 0 0 / 0.25);
}

/* wu.variant.breakpoints
A custom extension of breakpoints so that we support different breakpoint 
widths based on device orientation.
*/
@custom-variant h-sm (@media (height >= 32rem));
@custom-variant h-md (@media (height >= 40rem));
@custom-variant h-lg (@media (height >= 48rem));
@custom-variant h-xl (@media (height >= 56rem));
@custom-variant h-2xl (@media (height >= 64rem));
@custom-variant h-3xl (@media (height >= 72rem));

/* wu.variant.hocus
Applies a class on hover, focus or focus-within.
*/
@custom-variant hocus (&:is(:hover, :focus, :focus-within), &:has(:hover, :focus, :focus-within));

/* wu.preflight
Additional preflight styles.
*/
@layer base {
	html {
		-webkit-tap-highlight-color: rgba(128, 128, 128 / 0.5);
	}

	ul, ol, nav {
		overflow: auto;
	}


	:focus-visible {
		outline: none;
	}

	:modal {
		background-color: transparent;
	}

	::backdrop, :modal::backdrop, dialog::backdrop {
		filter: blur(var(--blur-sm));
		backdrop-filter: blur(var(--blur-sm));
		background-color: --alpha(var(--color-black) / 50%);
		background-size: 120% 120%;
		background-position: center;
	}

	* {
		color: var(--color-content-emph);
		text-decoration-color: var(--color-content-emph);
	}

	/* resets */
	fieldset,
	legend,
	label {
		display: block;
	}
}

/* wu.forms.input
Custom styling for input form elements.
*/
@theme inline {
  --wu-forms-input-padding-t: --spacing(1);
  --wu-forms-input-padding-r: --spacing(3);
  --wu-forms-input-padding-b: --spacing(1);
  --wu-forms-input-padding-l: --spacing(3);
  --wu-forms-input-padding: var(--wu-forms-input-padding-t) var(--wu-forms-input-padding-r) var(--wu-forms-input-padding-b) var(--wu-forms-input-padding-l);
  --wu-forms-input-border-width-t: 1px;
  --wu-forms-input-border-width-r: 1px;
  --wu-forms-input-border-width-b: 1px;
  --wu-forms-input-border-width-l: 1px;
  --wu-forms-input-border-width: var(--wu-forms-input-border-width-t) var(--wu-forms-input-border-width-r) var(--wu-forms-input-border-width-b) var(--wu-forms-input-border-width-l);
  --wu-forms-input-border-radius-tl: var(--radius-md);
  --wu-forms-input-border-radius-tr: var(--radius-md);
  --wu-forms-input-border-radius-br: var(--radius-md);
  --wu-forms-input-border-radius-bl: var(--radius-md);
  --wu-forms-input-border-radius: var(--wu-forms-input-border-radius-tl) var(--wu-forms-input-border-radius-tr) var(--wu-forms-input-border-radius-br) var(--wu-forms-input-border-radius-bl);
  --wu-forms-input-bg-color: var(--color-surface-2);
  --wu-forms-input-border-color: var(--color-surface-3);
  --wu-forms-input-text-color: var(--color-content-emph);
  --wu-forms-input-placeholder-color: var(--color-content-noemph);
}

@layer base {
	/* - webkit calendar picker */
	input::-webkit-calendar-picker-indicator {
		@variant dark {
			filter: invert(100%);
		}
	}

	input::placeholder,
	textarea::placeholder {
		color: var(--wu-forms-input-placeholder-color);
	}

	input,
	textarea {
	  outline-width: 0;
	  width: 100%;
	  filter: brightness(95%);
		padding: var(--wu-forms-input-padding);
		border-width: var(--wu-forms-input-border-width);
		border-radius: var(--wu-forms-input-border-radius);
		background-color: var(--wu-forms-input-bg-color);
		border-color: var(--wu-forms-input-border-color);
		color: var(--wu-forms-input-text-color);

		@variant hocus {
  	  filter: brightness(98%);
		}

	  --tw-inset-ring-shadow: 0 0 0 0;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
		@variant focus-within {
  	  --tw-inset-ring-shadow: inset 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
		  --tw-ring-color: var(--color-highlight);
		}

		&:user-invalid {
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
		}
	}


	/* states */
	input[readonly],
	textarea[readonly] {
	  cursor: not-allowed;
	}

	input:disabled,
	textarea:disabled {
	  opacity: 50%;
	  cursor: not-allowed;
	}

	/* webkit search input cancel button */
	input[type='search']::-webkit-search-cancel-button {
		-webkit-appearance: none;
		background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath d='M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z'/%3E%3C/svg%3E")
			no-repeat 50% 50%;
		width: --spacing(4);
		height: --spacing(4);
		border-radius: calc(infinity * 1px);
		background-size: contain;
		opacity: 0;
		pointer-events: none;
	}
	input[type='search']:focus::-webkit-search-cancel-button {
		opacity: 100%;
		pointer-events: auto;
	}
	input[type='search']::-webkit-search-cancel-button {
		@variant dark {
			filter: invert(100%);
		}
	}
}

/* wu.forms.progress
Custom styling for the progress form element.
*/
@theme inline {
  --wu-forms-progress-border-width-t: 1px;
  --wu-forms-progress-border-width-r: 1px;
  --wu-forms-progress-border-width-b: 1px;
  --wu-forms-progress-border-width-l: 1px;
  --wu-forms-progress-border-width: var(--wu-forms-progress-border-width-t) var(--wu-forms-progress-border-width-r) var(--wu-forms-progress-border-width-b) var(--wu-forms-progress-border-width-l);
  --wu-forms-progress-border-radius-tl: var(--radius-md);
  --wu-forms-progress-border-radius-tr: var(--radius-md);
  --wu-forms-progress-border-radius-br: var(--radius-md);
  --wu-forms-progress-border-radius-bl: var(--radius-md);
  --wu-forms-progress-border-radius: var(--wu-forms-progress-border-radius-tl) var(--wu-forms-progress-border-radius-tr) var(--wu-forms-progress-border-radius-br) var(--wu-forms-progress-border-radius-bl);
  --wu-forms-progress-border-color: var(--color-surface-3);
  --wu-forms-progress-bar-color: var(--color-surface-2);
  --wu-forms-progress-fill-color: var(--color-surface-3);
}

@layer base {
	progress {
		webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		width: 100%;
		height: --spacing(2);
		overflow: hidden;
    border-width: var(--wu-forms-progress-border-width);
    border-radius: var(--wu-forms-progress-border-radius);
    border-color: var(--wu-forms-progress-border-color);

		&::-webkit-progress-bar {
		  background-color: var(--wu-forms-progress-bar-color);
		}
		&::-webkit-progress-value {
		  background-color: var(--wu-forms-progress-fill-color);
		}
	}
	::-moz-progress-bar {
	  background-color: var(--wu-forms-progress-bar-color);
	}
	:indeterminate::-moz-progress-bar {
		width: 0;
	}
}

/* wu.forms.range
Custom styling for the range input element.
*/
@theme inline {
  --wu-forms-range-accent-color: var(--color-highlight);
}

@layer base {
	/* https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color */
	[type='range'] {
		width: 100%;
		accent-color: var(--wu-forms-range-accent-color);
	}
}

/* wu.forms.select
Custom styling for the select form element.
*/
@theme inline {
  --wu-forms-select-padding-t: --spacing(2);
  --wu-forms-select-padding-r: --spacing(8);
  --wu-forms-select-padding-b: --spacing(2);
  --wu-forms-select-padding-l: --spacing(2);
  --wu-forms-select-padding: var(--wu-forms-select-padding-t) var(--wu-forms-select-padding-r) var(--wu-forms-select-padding-b) var(--wu-forms-select-padding-l);
  --wu-forms-select-border-width-t: 1px;
  --wu-forms-select-border-width-r: 1px;
  --wu-forms-select-border-width-b: 1px;
  --wu-forms-select-border-width-l: 1px;
  --wu-forms-select-border-width: var(--wu-forms-select-border-width-t) var(--wu-forms-select-border-width-r) var(--wu-forms-select-border-width-b) var(--wu-forms-select-border-width-l);
  --wu-forms-select-border-radius-tl: var(--radius-md);
  --wu-forms-select-border-radius-tr: var(--radius-md);
  --wu-forms-select-border-radius-br: var(--radius-md);
  --wu-forms-select-border-radius-bl: var(--radius-md);
  --wu-forms-select-border-radius: var(--wu-forms-select-border-radius-tl) var(--wu-forms-select-border-radius-tr) var(--wu-forms-select-border-radius-br) var(--wu-forms-select-border-radius-bl);
  --wu-forms-select-bg-color: var(--color-surface-2);
  --wu-forms-select-border-color: var(--color-surface-3);
  --wu-forms-select-text-color: var(--color-surface-content);

  --wu-forms-select-option-padding-t: --spacing(2);
  --wu-forms-select-option-padding-r: --spacing(4);
  --wu-forms-select-option-padding-b: --spacing(2);
  --wu-forms-select-option-padding-l: --spacing(4);
  --wu-forms-select-option-padding: var(--wu-forms-select-option-padding-t) var(--wu-forms-select-option-padding-r) var(--wu-forms-select-option-padding-b) var(--wu-forms-select-option-padding-l);
  --wu-forms-select-option-border-width-t: 1px;
  --wu-forms-select-option-border-width-r: 1px;
  --wu-forms-select-option-border-width-b: 1px;
  --wu-forms-select-option-border-width-l: 1px;
  --wu-forms-select-option-border-width: var(--wu-forms-select-option-border-width-t) var(--wu-forms-select-option-border-width-r) var(--wu-forms-select-option-border-width-b) var(--wu-forms-select-option-border-width-l);
  --wu-forms-select-option-border-radius-tl: var(--radius-md);
  --wu-forms-select-option-border-radius-tr: var(--radius-md);
  --wu-forms-select-option-border-radius-br: var(--radius-md);
  --wu-forms-select-option-border-radius-bl: var(--radius-md);
  --wu-forms-select-option-border-radius: var(--wu-forms-select-option-border-radius-tl) var(--wu-forms-select-option-border-radius-tr) var(--wu-forms-select-option-border-radius-br) var(--wu-forms-select-option-border-radius-bl);
  --wu-forms-select-option-bg-color: var(--color-surface-2);
  --wu-forms-select-option-border-color: var(--color-surface-3);
  --wu-forms-select-option-text-color: var(--color-surface-content);
}

@layer base {	
	select {
	  outline-width: 0;
	  width: 100%;
	  filter: brightness(95%);
		padding: var(--wu-forms-select-padding);
		border-width: var(--wu-forms-select-border-width);
		border-radius: var(--wu-forms-select-border-radius);
		background-color: var(--wu-forms-select-bg-color);
		border-color: var(--wu-forms-select-border-color);
		color: var(--wu-forms-select-text-color);

		@variant hocus {
  	  filter: brightness(98%);
		}

	  --tw-inset-ring-shadow: 0 0 0 0;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
		@variant focus-within {
  	  --tw-inset-ring-shadow: inset 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
		  --tw-ring-color: var(--color-highlight);
		}
	}

	select[size] {
		--wu-select-bg-color: transparent;
	}

	select optgroup {
	  font-weight: 700;
	}

	select optgroup option {
	  margin-left: 0;
	  padding-left: 0;
	}

	select optgroup option:first-of-type {
	  margin-top: --spacing(3);
	}

	select optgroup option:last-child {
	  margin-bottom: --spacing(3);
	}

	select option {
		padding: var(--wu-forms-select-option-padding);
		border-width: var(--wu-forms-select-option-border-width);
		border-radius: var(--wu-forms-select-option-border-radius);
		background-color: var(--wu-forms-select-option-bg-color);
		border-color: var(--wu-forms-select-option-border-color);
		color: var(--wu-forms-select-option-text-color);
	  cursor: pointer;
	}

	select option:checked {
		/* https://stackoverflow.com/questions/50618602/change-color-of-selected-option-in-select-multiple */
		background: rgb(var(--color-highlight)) linear-gradient(0deg, rgb(var(--color-highlight)) 0%, rgb(var(--color-highlight)) 100%);
		color: var(--color-highlight-content);
	}

	select:disabled {
	  opacity: 50%;
	  cursor: not-allowed;
	}

	select[readonly] {
	  cursor: not-allowed;
	}
}

/* wu.forms.radio
Custom styling for the radio and checkbox element.
*/
@theme inline {
  --wu-forms-radio-size: --spacing(5);
  --wu-forms-radio-accent-color: var(--color-highlight);
}

@layer base {
	[type='checkbox'],
	[type='radio'] {
	  width: var(--wu-forms-radio-size);
	  height: var(--wu-forms-radio-size);
		accent-color: var(--wu-forms-radio-accent-color);
		cursor: pointer;
	}
}

/* wu.forms.color
Custom styling for a color picker element.
*/
@layer base {
	/* https://stackoverflow.com/questions/11167281/webkit-css-to-control-the-box-around-the-color-in-an-inputtype-color */
	[type='color'] {
	  width: --spacing(10);
	  height: --spacing(10);
	  overflow: hidden;
	  cursor: pointer;
		-webkit-appearance: none; /* WebKit Only */
	}
	[type='color']::-webkit-color-swatch-wrapper {
	  padding: 0;
	}
	[type='color']::-webkit-color-swatch {
	  border-width: 0;

	  @variant hover {
	    filter: brightness(110%);
	  }
	}
	[type='color']::-moz-color-swatch {
	  border-width: 0;
	}
}

/* wu.utility.anchor
Positions an element at the sides of a parent element.

# Qualifiers
Certain letters that come before the edge specification carry 
additional information on where to put the element. These 
letters are qualifiers that add even more nuance and control 
to the anchor utility. Without these qualifiers, the element 
will be placed on _its_ half at the given edge.
- 'o' means 'outside'
- 'i' means 'inside'
*/
@utility anchor {
  position: relative;
}

@utility anchor-t {
  position: absolute;
  transform: translateX(-50%);
  top: auto;
  left: 50%;
  right: auto;
  bottom: 100%;
}

@utility anchor-tl {
  position: absolute;
  transform: translateX(-50%);
  top: auto;
  left: 0%;
  right: auto;
  bottom: 100%;
}

@utility anchor-itl {
  position: absolute;
  transform: translateX(0%);
  top: auto;
  left: 0%;
  right: auto;
  bottom: 100%;
}

@utility anchor-otl {
  position: absolute;
  transform: translateX(-100%);
  top: auto;
  left: 0%;
  right: auto;
  bottom: 100%;
}

@utility anchor-tr {
  position: absolute;
  transform: translateX(-50%);
  top: auto;
  left: 100%;
  right: auto;
  bottom: 100%;
}

@utility anchor-itr {
  position: absolute;
  transform: translateX(-100%);
  top: auto;
  left: 100%;
  right: auto;
  bottom: 100%;
}

@utility anchor-otr {
  position: absolute;
  transform: translateX(0%);
  top: auto;
  left: 100%;
  right: auto;
  bottom: 100%;
}

@utility anchor-b {
  position: absolute;
  transform: translateX(-50%);
  top: 100%;
  left: 50%;
  right: auto;
  bottom: auto;
}

@utility anchor-bl {
  position: absolute;
  transform: translateX(-50%);
  top: 100%;
  left: 0%;
  right: auto;
  bottom: auto;
}

@utility anchor-ibl {
  position: absolute;
  transform: translateX(0%);
  top: 100%;
  left: 0%;
  right: auto;
  bottom: auto;
}

@utility anchor-obl {
  position: absolute;
  transform: translateX(-100%);
  top: 100%;
  left: 0%;
  right: auto;
  bottom: auto;
}

@utility anchor-br {
  position: absolute;
  transform: translateX(-50%);
  top: 100%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-ibr {
  position: absolute;
  transform: translateX(-100%);
  top: 100%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-obr {
  position: absolute;
  transform: translateX(0%);
  top: 100%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-l {
  position: absolute;
  transform: translateY(-50%);
  top: 50%;
  left: auto;
  right: 100%;
  bottom: auto;
}

@utility anchor-lt {
  position: absolute;
  transform: translateY(-50%);
  top: 0%;
  left: auto;
  right: 100%;
  bottom: auto;
}

@utility anchor-ilt {
  position: absolute;
  transform: translateY(0%);
  top: 0%;
  left: auto;
  right: 100%;
  bottom: auto;
}

@utility anchor-olt {
  position: absolute;
  transform: translateY(-100%);
  top: 0%;
  left: auto;
  right: 100%;
  bottom: auto;
}

@utility anchor-lb {
  position: absolute;
  transform: translateY(-50%);
  top: 100%;
  left: auto;
  right: 100%;
  bottom: auto;
}

@utility anchor-ilb {
  position: absolute;
  transform: translateY(-100%);
  top: 100%;
  left: auto;
  right: 100%;
  bottom: auto;
}

@utility anchor-olb {
  position: absolute;
  transform: translateY(0%);
  top: 100%;
  left: auto;
  right: 100%;
  bottom: auto;
}

@utility anchor-r {
  position: absolute;
  transform: translateY(-50%);
  top: 50%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-rt {
  position: absolute;
  transform: translateY(-50%);
  top: 0%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-irt {
  position: absolute;
  transform: translateY(0%);
  top: 0%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-ort {
  position: absolute;
  transform: translateY(-100%);
  top: 0%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-rb {
  position: absolute;
  transform: translateY(-50%);
  top: 100%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-irb {
  position: absolute;
  transform: translateY(-100%);
  top: 100%;
  left: 100%;
  right: auto;
  bottom: auto;
}

@utility anchor-orb {
  position: absolute;
  transform: translateY(0%);
  top: 100%;
  left: 100%;
  right: auto;
  bottom: auto;
}

/* wu.utility.bgi
Provides with a set of custom backgrounds.

# Available backgrounds:
- `bgi-stripes-*`

# Usage

```html
<div class="w-[200px] h-[100px] bg-blue-700">
  <div class="w-full h-full bgi-stripes-blue-500"/>
</div>
```
*/
@utility bgi-stripes-* {
  --wu-bgi-stripes-color: --value(--color-*);
  background-image: linear-gradient(135deg, var(--wu-bgi-stripes-color) 10%, transparent 10%, transparent 50%, var(--wu-bgi-stripes-color) 50%, var(--wu-bgi-stripes-color) 60%, transparent 60%, transparent 100%);
}

/* wu.utility.center
Utilities for quickly centering the contents of a container.

# Usage

## Center both vertically and horizontally
```html
<div class="w-16 h-16 center">
  <div class="w-8 h-8"/>
</div>
```

## Center vertically
```html
<div class="w-16 h-16 vcenter">
  <div class="w-8 h-8"/>
</div>
```

## Center horizontally 
```html
<div class="w-16 h-16 hcenter">
  <div class="w-8 h-8"/>
</div>
```
*/
@utility center {
  justify-content: center;
  align-items: center;
}

@utility center-none {
  justify-content: normal;
  align-items: flex-start;
}

@utility hcenter {
  justify-content: center;
}

@utility hcenter-none {
  justify-content: normal;
}

@utility vcenter {
  align-items: center;
}

@utility vcenter-none {
  align-items: flex-start;
}

/* wu.utility.cover
Utilities for covering the full area of the parent.                                                                                                                                                                                                                                                                                                                                             ontents of a container.

# Usage
```html
<div class="w-32 h-32">
  <div class="cover"/>
</div>
```
*/
@utility cover {
  width: 100%;
  height: 100%;
}

/* wu.component.divider
Used to separate content vertically or horizontally.

# Usage

## Vertical divider (A | B)
```html
<div class="vdivider"/>
```

## Horizontal divider A_B
```html
<div class="hdivider"/>
```
*/
@layer components {
  .hdivider {
    height: 0;
    display: flex;
    flex-direction: row;
    align-items: center;
    align-self: stretch;

    &:before, &:after {
      content: "";
      background-color: var(--wu-divider-color);
      flex-grow: 1;
      width: 100%;
      height: 1px;
    }

    &:not(:empty) {
      gap: --spacing(2);
    }
  }
  
  .vdivider {
    width: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    align-self: stretch;

    &:before, &:after {
      content: "";
      background-color: var(--wu-divider-color);
      flex-grow: 1;
      width: 1px;
      height: 100%;
    }

    &:not(:empty) {
      gap: --spacing(2);
    }
  }
}

@utility divider-* {
  --wu-divider-color: --value(--color-*);
}

/* wu.utility.ghost
Styling for components with a strong border and weak body.
 relative after:absolute after:top-1/4 after:h-[20px] after:bg-center after:w-3/4 after:bg-radial after:from-bg-3/50 after:from-5% after:to-70% after:to-transparent
# Usage

```html
<span class="w-8 h-8 bg-ghost-blue"/>
```
*/
@utility ghost-* {
  border-color: --alpha(--value(--color-*) / 100%);
  background-color: --alpha(--value(--color-*) / 20%);
}

/* wu.utility.w-fixed
Used to fixate the width of an element.
*/
@utility w-fixed-* {
  min-width: calc(var(--spacing) * --value(integer));
  width: calc(var(--spacing) * --value(integer));
  min-width: --value([length]);
  width: --value([length]);
}

/* wu.utility.w-max
Used to expand an element with regards to the viewport width.
*/
@utility w-max-* {
  width: 100lvw;
  max-width: calc(100lvw - var(--spacing) * --value(integer));
  max-width: calc(100lvw - --value([length]));

  /* heavily relies on the fact that the user won't change breakpoints, modify this if you do !!! */
  :where(.container, .sm\:container) & {
    @variant sm {
      max-width: calc(var(--breakpoint-sm) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-sm) - --value([length]));
    }

    @variant md {
      max-width: calc(var(--breakpoint-md) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-md) - --value([length]));
    }

    @variant lg {
      max-width: calc(var(--breakpoint-lg) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-lg) - --value([length]));
    }

    @variant xl {
      max-width: calc(var(--breakpoint-xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-xl) - --value([length]));
    }

    @variant 2xl {
      max-width: calc(var(--breakpoint-2xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-2xl) - --value([length]));
    }
  }

  :where(.md\:container) & {
    @variant md {
      max-width: calc(var(--breakpoint-md) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-md) - --value([length]));
    }

    @variant lg {
      max-width: calc(var(--breakpoint-lg) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-lg) - --value([length]));
    }

    @variant xl {
      max-width: calc(var(--breakpoint-xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-xl) - --value([length]));
    }

    @variant 2xl {
      max-width: calc(var(--breakpoint-2xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-2xl) - --value([length]));
    }
  }

  :where(.lg\:container) & {
    @variant lg {
      max-width: calc(var(--breakpoint-lg) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-lg) - --value([length]));
    }

    @variant xl {
      max-width: calc(var(--breakpoint-xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-xl) - --value([length]));
    }

    @variant 2xl {
      max-width: calc(var(--breakpoint-2xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-2xl) - --value([length]));
    }
  }

  :where(.xl\:container) & {
    @variant xl {
      max-width: calc(var(--breakpoint-xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-xl) - --value([length]));
    }

    @variant 2xl {
      max-width: calc(var(--breakpoint-2xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-2xl) - --value([length]));
    }
  }

  :where(.2xl\:container) & {
    @variant 2xl {
      max-width: calc(var(--breakpoint-2xl) - var(--spacing) * --value(integer));
      max-width: calc(var(--breakpoint-2xl) - --value([length]));
    }
  }
}

/* wu.utility.h-fixed
Used to fixate the height of an element.
*/
@utility h-fixed-* {
  min-height: calc(var(--spacing) * --value(integer));
  height: calc(var(--spacing) * --value(integer));
  min-height: --value([length]);
  height: --value([length]);
}

/* wu.utility.h-max
Used to expand an element with regards to the viewport height.
*/
@utility h-max-* {
  height: 100lvh;
  max-height: calc(100lvh - var(--spacing) * --value(integer));
  max-height: calc(100lvh - --value([length]));
}

/* wu.utility.h-min
Used to expand an element to a minimal height with regards to the viewport height.
*/
@utility h-min-* {
  min-height: calc(100lvh - var(--spacing) * --value(integer));
  min-height: calc(100lvh - --value([length]));
}

/* wu.utility.hide-scrollbar
Used to hide a scrollbar from a container.

# Usage

```html
<div class="hide-scrollbar"/>
```
*/
@utility hide-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}

/* wu.utility.highlight
A button style that highlights the surrounding area on hover.

# Usage

```html
<button class="highlight"/>
```
*/
@utility highlight {
  --wu-highlight-border-color: --alpha(var(--color-surface-content) / 20%);
  --wu-highlight-bg-color: --alpha(var(--color-surface-content) / 10%);
  --wu-divider-color: var(--wu-highlight-border-color);

  @variant hocus {
    background-color: var(--wu-highlight-bg-color);
    border-color: var(--wu-highlight-border-color);
  }

  @variant group-hocus {
    background-color: var(--wu-highlight-bg-color);
    border-color: var(--wu-highlight-border-color);
  }
}

@utility highlight-bright {
  filter: brightness(95%);
  
  @variant hover {
    filter: brightness(98%);
  }

  @variant focus-within {
    filter: brightness(98%);
  }
}

/* wu.component.link
Fancy styling for links.

# Usage

```html
<a href="#" class="link link-primary">{link}</a>
```
*/
@layer components {
  .link {
    cursor: pointer;
    text-decoration-thickness: 2px;
    text-underline-offset: 1px;
    text-decoration-line: none;
    text-decoration-color: currentColor;
    filter: brightness(95%);

    @variant hover {
      filter: brightness(98%);
      text-decoration-line: underline;
    }

    @variant focus {
      filter: brightness(98%);
      text-decoration-line: underline;
    }

    &[aria-current="page"] {
      filter: brightness(98%);
      text-decoration-line: underline;
    }
  }
}

@utility link-* {
  color: --value(--color-*);
  text-decoration-color: --value(--color-*);
}

/* wu.utility.mask
Crops the content of the element to common shapes.

# Usage

```html
<img class="mask <shape-of-your-choice>"/>
```
*/
@theme {
  --wu-mask-shape-squircle: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e");
  --wu-mask-shape-decagon: url("data:image/svg+xml,%3csvg width='192' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 58.779 19.098 36.327 50v61.804l-36.327 50L96 200l-58.779-19.098-36.327-50V69.098l36.327-50z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-diamond: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m100 0 100 100-100 100L0 100z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-heart: url("data:image/svg+xml,%3csvg width='200' height='185' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 184.606a15.384 15.384 0 0 1-8.653-2.678C53.565 156.28 37.205 138.695 28.182 127.7 8.952 104.264-.254 80.202.005 54.146.308 24.287 24.264 0 53.406 0c21.192 0 35.869 11.937 44.416 21.879a2.884 2.884 0 0 0 4.356 0C110.725 11.927 125.402 0 146.594 0c29.142 0 53.098 24.287 53.4 54.151.26 26.061-8.956 50.122-28.176 73.554-9.023 10.994-25.383 28.58-63.165 54.228a15.384 15.384 0 0 1-8.653 2.673Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e");
  --wu-mask-shape-hexagon: url("data:image/svg+xml,%3csvg width='182' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M.3 65.486c0-9.196 6.687-20.063 14.211-25.078l61.86-35.946c8.36-5.016 20.899-5.016 29.258 0l61.86 35.946c8.36 5.015 14.211 15.882 14.211 25.078v71.055c0 9.196-6.687 20.063-14.211 25.079l-61.86 35.945c-8.36 4.18-20.899 4.18-29.258 0L14.51 161.62C6.151 157.44.3 145.737.3 136.54V65.486Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e");
  --wu-mask-shape-hexagon-2: url("data:image/svg+xml,%3csvg width='200' height='182' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M64.786 181.4c-9.196 0-20.063-6.687-25.079-14.21L3.762 105.33c-5.016-8.36-5.016-20.9 0-29.259l35.945-61.86C44.723 5.851 55.59 0 64.786 0h71.055c9.196 0 20.063 6.688 25.079 14.211l35.945 61.86c4.18 8.36 4.18 20.899 0 29.258l-35.945 61.86c-4.18 8.36-15.883 14.211-25.079 14.211H64.786Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e");
  --wu-mask-shape-circle: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle fill='black' cx='100' cy='100' r='100' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-parallelogram: url("data:image/svg+xml,%3csvg width='200' height='154' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M46.154 0H200l-46.154 153.846H0z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-parallelogram-2: url("data:image/svg+xml,%3csvg width='200' height='154' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M153.846 0H0l46.154 153.846H200z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-parallelogram-3: url("data:image/svg+xml,%3csvg width='154' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M.077 47.077v153.846l153.846-46.154V.923z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-parallelogram-4: url("data:image/svg+xml,%3csvg width='154' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M153.923 47.077v153.846L.077 154.77V.923z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-pentagon: url("data:image/svg+xml,%3csvg width='192' height='181' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 95.106 69.098-36.327 111.804H37.22L.894 69.098z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-square: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 0h200v200H0z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-star: url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 137.263-58.779 42.024 22.163-68.389L.894 68.481l72.476-.243L96 0l22.63 68.238 72.476.243-58.49 42.417 22.163 68.389z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-star-2: url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 153.044-58.779 26.243 7.02-63.513L.894 68.481l63.117-13.01L96 0l31.989 55.472 63.117 13.01-43.347 47.292 7.02 63.513z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-triangle: url("data:image/svg+xml,%3csvg width='174' height='149' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 148.476-86.603.185L43.86 74.423 87 0l43.14 74.423 43.463 74.238z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-triangle-2: url("data:image/svg+xml,%3csvg width='174' height='150' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 .738 86.603-.184-43.463 74.238L87 149.214 43.86 74.792.397.554z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-triangle-3: url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m149.369 87.107.185 86.603-74.239-43.463L.893 87.107l74.422-43.14L149.554.505z' fill-rule='evenodd'/%3e%3c/svg%3e");
  --wu-mask-shape-triangle-4: url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M.631 87.107.446.505l74.239 43.462 74.422 43.14-74.422 43.14L.446 173.71z' fill-rule='evenodd'/%3e%3c/svg%3e");
}

@utility mask-* {
  mask-size: contain;
  mask-repeat: no-repeat;
  mask-position: center;
  mask-image: --value(--wu-mask-shape-*);
}

/* wu.utility.scroll-color
Styles the colors for a scrollbar cross-browser.

# Usage

```html
<div class="track-light-1 thumb-light-2"/>
```
*/
@utility track-* {
  --wu-scrollbar-track: --value(--color-*);
  scrollbar-color: var(--wu-scrollbar-thumb) var(--wu-scrollbar-track);
}

@utility thumb-* {
  --wu-scrollbar-thumb: --value(--color-*);
  scrollbar-color: var(--wu-scrollbar-thumb) var(--wu-scrollbar-track);
}

/* wu.component.stack
Visually puts elements on top of each other.

# Usage

```html
<div class="stack">
  <div/> 
  <div/> 
  <div/> 
</div>
```
*/
@layer components {
  .stack {
    display: inline-grid;
    place-items: center;
    align-items: flex-end;

    & > * {
      grid-column-start: 1;
      grid-row-start: 1;
      width: 100%;
      z-index: 1;
      opacity: 60%;
      transform: translateY(10%) scale(0.9);
    }

    & > *:nth-child(2) {
      z-index: 2;
      opacity: 80%;
      transform: translateY(5%) scale(0.95);
    }

    & > *:nth-child(1) {
      z-index: 3;
      opacity: 100%;
      transform: translateY(0) scale(1);
    }
  }
}

/* wu.utility.swap
Allows toggling the visibility of two elements using a checkbox or a class name.

# Usage

```html
<label class="swap <anim-of-your-choosing>">
  <input type="checkbox" />
  <div class="swap-on">ON</div>
  <div class="swap-off">OFF</div>
</label>
```
*/
@utility swap {
 position: relative; 
  display: inline-grid;
  place-content: center;
  user-select: none;
  cursor: pointer;

  & > * {
    grid-column-start: 1;
    grid-row-start: 1;
    transition-duration: 300ms;
    transition-timing-function: var(--ease-in-out);
    transition-property: transform, opacity;
  }

  & input {
    appearance: none;
    display: none;
  }

  & .swap-on, & .swap-indeterminate, & input:indeterminate ~ .swap-on {
    opacity: 0;
  }

  & input:checked ~ .swap-off, & .swap-active .swap-off, & input:indeterminate ~ .swap-off {
    opacity: 0;
  }

  & input:checked ~ .swap-on, & .swap-active .swap-on, & input:indeterminate ~ .swap-indeterminate {
    opacity: 100%;
  }
}

@utility swap-rotate {
  & .swap-on, & .swap-indeterminate, & input:indeterminate ~ .swap-on {
    rotate: 45deg;
  }

  & input:checked ~ .swap-off, & .swap-active .swap-off, & input:indeterminate ~ .swap-off {
    rotate: -45deg;
  }

  & input:checked ~ .swap-on, & .swap-active .swap-on, & input:indeterminate ~ .swap-indeterminate {
    rotate: 0deg;
  }
}

@utility swap-flip {
  transform-style: preserve-3d;
  perspective: 16em;

  & .swap-on, & .swap-indeterminate, & input:indeterminate ~ .swap-on {
    transform: rotateY(180deg);
    backface-visibility: hidden;
    opacity: 100%;
  }

  & input:checked ~ .swap-off, & .swap-active .swap-off, & input:indeterminate ~ .swap-off {
    transform: rotateY(-180deg);
    backface-visibility: hidden;
    opacity: 100%;
  }

  & input:checked ~ .swap-on, & .swap-active .swap-on, & input:indeterminate ~ .swap-indeterminate {
    transform: rotateY(0deg);
  }
}

/* wu.component.table
Wrapper class for a <div> surrounding a <table> for unique styling.

# Usage

```
<table class="wtable">
  <thead>...</thead>
  <tbody>...</tbody>
  <tfoot>...</tfoot>
</table>
```
*/
@theme inline {
  --wu-table-body-bg-color: var(--color-surface-1);
  --wu-table-header-bg-color: var(--color-surface-2);
  --wu-table-footer-bg-color: var(--color-surface-2);
  --wu-table-border-color: var(--color-surface-3);
  --wu-table-body-text-color: var(--color-content-emph);
  --wu-table-header-text-color: var(--color-content-emph);
  --wu-table-footer-text-color: var(--color-content-emph);
  --wu-table-cell-padding-t: --spacing(2);
  --wu-table-cell-padding-r: --spacing(4);
  --wu-table-cell-padding-b: --spacing(2);
  --wu-table-cell-padding-l: --spacing(4);
  --wu-table-cell-padding: var(--wu-table-cell-padding-t) var(--wu-table-cell-padding-r) var(--wu-table-cell-padding-b) var(--wu-table-cell-padding-l);
  --wu-table-border-width: 1px;
  --wu-table-border-radius: var(--radius-lg);
}

@layer components {
  /* NOTE: `table` is taken by tailwind, so name it wtable */
  .wtable {
    color: var(--wu-table-body-text-color);
    background-color: var(--wu-table-body-bg-color);
    border-color: var(--wu-table-border-color);
    border-width: var(--wu-table-border-width);
    border-radius: var(--wu-table-border-radius);
    overflow: hidden;

    table, .table {
      display: flex;
      flex-direction: column;
      width: 100%;
      height: 100%;
    }

    td, th, .table-cell {
      display: flex;
      flex: 1;
      justify-content: flex-start;
      align-items: center;
      padding: var(--wu-table-cell-padding);
      text-align: var(--wu-table-text-align);
      border-color: var(--wu-table-border-color);
    }

    &[data-wtable-align="left"] td,
    &[data-wtable-align="left"] th,
    &[data-wtable-align="left"] .table-cell {
      justify-content: flex-start;
    }

    &[data-wtable-align="center"] td,
    &[data-wtable-align="center"] th,
    &[data-wtable-align="center"] .table-cell {
      justify-content: center;
    }

    &[data-wtable-align="right"] td,
    &[data-wtable-align="right"] th,
    &[data-wtable-align="right"] .table-cell {
      justify-content: flex-end;
    }

    tr, .table-row {
      display: flex;
      border-color: var(--wu-table-border-color);
    }

    & tr, & .table-row {
      & > :not(:last-child:not(.absolute, .overlay, .hidden, .invisible), .absolute, .overlay, .hidden, .invisible) {
        border-inline-start-width: 0px;
        border-inline-end-width: var(--wu-table-border-width);
      }
    }

    & tfoot, & .table-footer-group {
      & > :not(:last-child:not(.absolute, .overlay, .hidden, .invisible), .absolute, .overlay, .hidden, .invisible) {
        border-top-width: 0px;
        border-bottom-width: var(--wu-table-border-width);
        border-color: var(--wu-table-border-color);
      }
    }

    &:not(:has(tfoot, .table-footer-group)) tbody, &:not(:has(tfoot, .table-footer-group)) .table-row-group,
    &:not(:has(tbody, .table-row-group)) thead, &:not(:has(tfoot, .table-footer-group)) .table-header-group {
      & > :not(:last-child:not(.absolute, .overlay, .hidden, .invisible), .absolute, .overlay, .hidden, .invisible) {
        border-top-width: 0px;
        border-bottom-width: var(--wu-table-border-width);
        border-color: var(--wu-table-border-color);
      }
    }

    &:has(tfoot, .table-footer-group) tbody, &:has(tfoot, .table-footer-group) .table-row-group,
    &:has(tbody, .table-row-group) thead, &:has(tfoot, .table-footer-group) .table-header-group {
      & > :not(.absolute, .overlay, .hidden, .invisible) {
        border-top-width: 0px;
        border-bottom-width: var(--wu-table-border-width);
        border-color: var(--wu-table-border-color);
      }
    }

    td, .table-cell {
      background-color: var(--wu-table-body-bg-color);
      color: var(--wu-table-body-text-color);
      border-color: var(--wu-table-border-color);
    }

    tbody, .table-row-group {
      overflow: auto;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
    }

    thead, .table-header-group {
      & td, & th, & .table-cell {
        background-color: var(--wu-table-header-bg-color);
        color: var(--wu-table-header-text-color);
      }
    }

    tfoot, .table-footer-group {
      & td, & th, & .table-cell {
        background-color: var(--wu-table-footer-bg-color);
        color: var(--wu-table-footer-text-color);
      }
    }
  }
}

/* wu.utility.text-outline
Adds outline to text.

# Usage

```html
<h1 class="text-outline-8 text-outline-primary">{title}</h1>
```
*/
@utility text-outline-* {
  -webkit-text-stroke-width: --value([length]);
  -webkit-text-stroke-width: calc(var(--spacing) * --value(integer));
  -webkit-text-stroke-color: --value(--color-*);
}

/* wu.utility.thin-scrollbar
Used to style a scrollbar to be thin.

# Usage

```html
<div class="thin-scrollbar"/>
```
*/
@utility thin-scrollbar {
  scrollbar-width: thin;
  &::-webkit-scrollbar {
    height: 0.5rem;
    width: 0.5rem;
  }
}

/* wu.component.directional
Utilities for horizontally and vertically aligning elements using flex.

Basically just `flex flex-row` and `flex flex-col`.

# Usage

## Horizontally align a list
```html
<ul class="horizontal gap-2">
	<li>...</li>
	<li>...</li>
	<li>...</li>
</ul>
```

## Vertically align a list
```html
<ul class="vertical gap-2">
	<li>...</li>
	<li>...</li>
	<li>...</li>
</ul>
```
*/
@utility horizontal {
  display: flex;
  flex-direction: row;
}

@utility vertical {
  display: flex;
  flex-direction: column;
}

/* wu.component.alert
Styling of UI elements that inform users about important events.

# Usage

```html
<div class="alert">
  <Icon/>
  <p>{message}</p>
</div>
```
*/
@theme inline {
  --wu-alert-padding-t: --spacing(4);
  --wu-alert-padding-r: --spacing(4);
  --wu-alert-padding-b: --spacing(4);
  --wu-alert-padding-l: --spacing(4);
  --wu-alert-padding: var(--wu-alert-padding-t) var(--wu-alert-padding-r) var(--wu-alert-padding-b) var(--wu-alert-padding-l);
  --wu-alert-border-width-t: 1px;
  --wu-alert-border-width-r: 1px;
  --wu-alert-border-width-b: 1px;
  --wu-alert-border-width-l: 1px;
  --wu-alert-border-width: var(--wu-alert-border-width-t) var(--wu-alert-border-width-r) var(--wu-alert-border-width-b) var(--wu-alert-border-width-l);
  --wu-alert-border-radius-tl: var(--radius-md);
  --wu-alert-border-radius-tr: var(--radius-md);
  --wu-alert-border-radius-br: var(--radius-md);
  --wu-alert-border-radius-bl: var(--radius-md);
  --wu-alert-border-radius: var(--wu-alert-border-radius-tl) var(--wu-alert-border-radius-tr) var(--wu-alert-border-radius-br) var(--wu-alert-border-radius-bl);
}

@layer components {
  .alert {
    display: flex;
    flex-direction: column;
    gap: --spacing(4);
    padding: var(--wu-alert-padding);
    border-width: var(--wu-alert-border-width);
    border-radius: var(--wu-alert-border-radius);

    @variant md {
      flex-direction: row;
      align-items: center;
    }
  }
}

/* wu.component.avatar
Avatar component with optional slots on its circumference at 8 points.

# Usage

```html
<img src="my-avatar.png" class="avatar avatar-size-16">
	<span class="avatar-slot-1"/>
	<span class="avatar-slot-3"/>
	<span class="avatar-slot-5"/>
	<span class="avatar-slot-7"/>
</img>
```
*/
@layer components {
  .avatar {
    height: var(--wu-avatar-height);
    width: var(--wu-avatar-width);
    display: grid;
    grid-template-columns: 1fr;
    pointer-events: none !important;
    border-radius: calc(infinity * 1px);
    & > * {
      pointer-events: auto;
    }

    & .avatar-slot-1, & .avatar-slot-2, & .avatar-slot-3, & .avatar-slot-4, & .avatar-slot-5, & .avatar-slot-6, & .avatar-slot-7, & .avatar-slot-8 {
      justify-self: center;
      align-self: center;
      grid-row-start: 1;
      grid-column-start: 1;
      pointer-events: none !important;
      & > * {
        pointer-events: auto;
      }
      transform: translate(calc(var(--wu-avatar-width) * 0.5 * var(--wu-avatar-cos)), calc(var(--wu-avatar-height) * 0.5 * var(--wu-avatar-sin)));
    }
  }
	.avatar-slot-1 {
		--wu-avatar-cos: 0;
		--wu-avatar-sin: -1;
	}
	.avatar-slot-2 {
		--wu-avatar-cos: 0.70710678118;
		--wu-avatar-sin: -0.70710678118;
	}
	.avatar-slot-3 {
		--wu-avatar-cos: 1;
		--wu-avatar-sin: 0;
	}
	.avatar-slot-4 {
		--wu-avatar-cos: 0.70710678118;
		--wu-avatar-sin: 0.70710678118;
	}
	.avatar-slot-5 {
		--wu-avatar-cos: 0;
		--wu-avatar-sin: 1;
	}
	.avatar-slot-6 {
		--wu-avatar-cos: -0.70710678118;
		--wu-avatar-sin: 0.70710678118;
	}
	.avatar-slot-7 {
		--wu-avatar-cos: -1;
		--wu-avatar-sin: 0;
	}
	.avatar-slot-8 {
		--wu-avatar-cos: -0.70710678118;
		--wu-avatar-sin: -0.70710678118;
	}
}

@utility avatar-size-* {
  --wu-avatar-width: --value([length]);
  --wu-avatar-height: --value([length]);
  --wu-avatar-width: calc(var(--spacing) * --value(integer));
  --wu-avatar-height: calc(var(--spacing) * --value(integer));
}

@utility avatar-w-* {
  --wu-avatar-width: --value([length]);
  --wu-avatar-width: calc(var(--spacing) * --value(integer));
}

@utility avatar-h-* {
  --wu-avatar-height: --value([length]);
  --wu-avatar-height: calc(var(--spacing) * --value(integer));
}

/* wu.component.badge
Styling for small non-interactive elements that indicate some information.

# Usage

```html
<span class="badge">{tag}</span>
<span class="badge-icon">{icon}</span>
```
*/
@layer components {
  .badge {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    white-space: nowrap;
    font-weight: 600;
    font-size: var(--text-xs);
    line-height: var(--text-xs--line-height);
    padding: --spacing(1) --spacing(2);
    border-radius: var(--radius-xl);
  }
  .badge-icon {
    width: --spacing(6);
    height: --spacing(6);
    display: inline-flex;
    justify-content: center;
    align-items: center;
    white-space: nowrap;
    font-weight: 600;
    font-size: var(--text-xs);
    line-height: var(--text-xs--line-height);
    border-radius: calc(infinity * 1px);
  }
}

/* wu.component.breadcrumbs
Styling of a list that displays the current navigation hierarchy.

# Usage

```html
<div class="breadcrumbs">
  <ul>
    <li><a>{home}</a></li>
    <li><a>{docs}</a></li>
    <li>{std::variant}</li>
  </ul>
</div>
```
*/
@layer components {
  .breadcrumbs {
    display: inline-flex;
    align-items: center;
    gap: --spacing(2);
    overflow-x: auto;
    padding-block: --spacing(2);

    & > * {
      display: inline-flex;
      align-items: center;
      & + *:before {
        content: "";
        border-top: 1px solid;
        border-right: 1px solid;
        background-color: transparent;
        display: inline-flex;
        margin-right: --spacing(3);
        width: --spacing(1.5);
        height: --spacing(1.5);
        rotate: 45deg;
        opacity: 40%;
      }
    }
  }
}

/* wu.component.btn
Styling for elements that provide the user to take an action.

# Usage

```html
<button class="btn">{text}</button>
<button class="btn-wide">{text}</button>
<button class="btn-circle">{text}</button>
```
TODO: flesh out properly
*/
@theme inline {
  --wu-btn-padding-t: --spacing(2);
  --wu-btn-padding-r: --spacing(3);
  --wu-btn-padding-b: --spacing(2);
  --wu-btn-padding-l: --spacing(3);
  --wu-btn-padding: var(--wu-btn-padding-t) var(--wu-btn-padding-r) var(--wu-btn-padding-b) var(--wu-btn-padding-l);
  --wu-btn-border-width-t: 1px;
  --wu-btn-border-width-r: 1px;
  --wu-btn-border-width-b: 1px;
  --wu-btn-border-width-l: 1px;
  --wu-btn-border-width: var(--wu-btn-border-width-t) var(--wu-btn-border-width-r) var(--wu-btn-border-width-b) var(--wu-btn-border-width-l);
  --wu-btn-border-radius-tl: var(--radius-md);
  --wu-btn-border-radius-tr: var(--radius-md);
  --wu-btn-border-radius-br: var(--radius-md);
  --wu-btn-border-radius-bl: var(--radius-md);
  --wu-btn-border-radius: var(--wu-btn-border-radius-tl) var(--wu-btn-border-radius-tr) var(--wu-btn-border-radius-br) var(--wu-btn-border-radius-bl);
  --wu-btn-bg-color: transparent;
  --wu-btn-border-color: transparent;
  --wu-btn-text-color: var(--color-content-emph);

  --wu-btn-icon-padding-t: --spacing(1);
  --wu-btn-icon-padding-r: --spacing(1);
  --wu-btn-icon-padding-b: --spacing(1);
  --wu-btn-icon-padding-l: --spacing(1);
  --wu-btn-icon-padding: var(--wu-btn-icon-padding-t) var(--wu-btn-icon-padding-r) var(--wu-btn-icon-padding-b) var(--wu-btn-icon-padding-l);
  --wu-btn-icon-border-width-t: 1px;
  --wu-btn-icon-border-width-r: 1px;
  --wu-btn-icon-border-width-b: 1px;
  --wu-btn-icon-border-width-l: 1px;
  --wu-btn-icon-border-width: var(--wu-btn-icon-border-width-t) var(--wu-btn-icon-border-width-r) var(--wu-btn-icon-border-width-b) var(--wu-btn-icon-border-width-l);
  --wu-btn-icon-border-radius-tl: var(--wu-btn-border-radius-tl);
  --wu-btn-icon-border-radius-tr: var(--wu-btn-border-radius-tr);
  --wu-btn-icon-border-radius-br: var(--wu-btn-border-radius-br);
  --wu-btn-icon-border-radius-bl: var(--wu-btn-border-radius-bl);
  --wu-btn-icon-border-radius: var(--wu-btn-icon-border-radius-tl) var(--wu-btn-icon-border-radius-tr) var(--wu-btn-icon-border-radius-br) var(--wu-btn-icon-border-radius-bl);
  --wu-btn-icon-bg-color: transparent;
  --wu-btn-icon-border-color: transparent;
  --wu-btn-icon-text-color: var(--color-content-emph);
}

@layer components {
  .btn {
    white-space: nowrap;
    text-wrap: nowrap;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    background-color: var(--wu-btn-bg-color);
    border-color: var(--wu-btn-border-color);
    color: var(--wu-btn-text-color);
    padding: var(--wu-btn-padding);
    border-width: var(--wu-btn-border-width);
    border-radius: var(--wu-btn-border-radius);

    @variant hocus {
      filter: brightness(115%);
    }

	  --tw-inset-ring-shadow: 0 0 0 0;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
		@variant focus-within {
  	  --tw-inset-ring-shadow: inset 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
		  --tw-ring-color: var(--color-highlight);
		}

    &:disabled {
      cursor: not-allowed;
      background-color: --alpha(var(--wu-btn-bg-color) / 75%);

      @variant hover {
        filter: brightness(100%);
      }
    }

    & > * {
      color: var(--wu-btn-text-color);
      fill: var(--wu-btn-text-color);
      stroke: var(--wu-btn-text-color);
    }

    & > .icon {
      --wu-icon-color: var(--wu-btn-text-color);
    }

    & > .loading {
      --wu-loading-color: var(--wu-btn-text-color);
    }
  }

  .btn-icon {
    white-space: nowrap;
    text-wrap: nowrap;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    aspect-ratio: 1 / 1;
    background-color: var(--wu-btn-icon-bg-color);
    border-color: var(--wu-btn-icon-border-color);
    color: var(--wu-btn-icon-text-color);
    padding: var(--wu-btn-icon-padding);
    border-width: var(--wu-btn-icon-border-width);
    border-radius: var(--wu-btn-icon-border-radius);

    @variant hocus {
      filter: brightness(115%);
    }

	  --tw-inset-ring-shadow: 0 0 0 0;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
		@variant focus-within {
  	  --tw-inset-ring-shadow: inset 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
		  --tw-ring-color: var(--color-highlight);
		}

    &:disabled {
      cursor: not-allowed;
      background-color: --alpha(var(--wu-btn-icon-bg-color) / 75%);

      @variant hover {
        filter: brightness(100%);
      }
    }

    & > * {
      color: var(--wu-btn-text-color);
      fill: var(--wu-btn-text-color);
      stroke: var(--wu-btn-text-color);
    }

    & > .icon {
      --wu-icon-color: var(--wu-btn-text-color);
    }

    & > .loading {
      --wu-loading-color: var(--wu-btn-text-color);
    }
  }
}

/* wu.component.btns
Styling for elements that provide the user to take an action.

# Usage

```html
<div class="btns">
	<button class="btn">{text}</button>
	<button class="btn">{text}</button>
	<button class="btn">{text}</button>
</btns>
```
TODO: flesh out properly
*/
@theme inline {
  --wu-btns-padding-t: 0;
  --wu-btns-padding-r: 0;
  --wu-btns-padding-b: 0;
  --wu-btns-padding-l: 0;
  --wu-btns-padding: var(--wu-btns-padding-t) var(--wu-btns-padding-r) var(--wu-btns-padding-b) var(--wu-btns-padding-l);
  --wu-btns-border-radius-tl: 0;
  --wu-btns-border-radius-tr: 0;
  --wu-btns-border-radius-br: 0;
  --wu-btns-border-radius-bl: 0;
  --wu-btns-border-radius: var(--wu-btns-border-radius-tl) var(--wu-btns-border-radius-tr) var(--wu-btns-border-radius-br) var(--wu-btns-border-radius-bl);
  --wu-btns-border-width-t: 0;
  --wu-btns-border-width-r: 0;
  --wu-btns-border-width-b: 0;
  --wu-btns-border-width-l: 0;
  --wu-btns-border-width: var(--wu-btns-border-width-t) var(--wu-btns-border-width-r) var(--wu-btns-border-width-b) var(--wu-btns-border-width-l);
  --wu-btns-bg-color: transparent;
  --wu-btns-border-color: transparent;
}

@layer components {
  .hbtns {
    display: flex;
    flex-direction: row;
    padding: var(--wu-btns-padding);
    border-width: var(--wu-btns-border-width);
    border-radius: var(--wu-btns-border-radius);
    border-color: var(--wu-btns-border-color);
    background-color: var(--wu-btns-bg-color);

    & > * {
      border-radius: var(--wu-btns-border-radius);
    }

    & > :not(:first-child, :last-child) {
      border-left-width: 0;
      border-right-width: 0;
    }

    & > :first-child:not(:only-child) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    & > :last-child:not(:only-child) {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }

    &:not(.hbtns-borders-between) > :not(:first-child, :last-child) {
      border-radius: 0;
    }

    &:not(.hbtns-borders-between) > :first-child:not(:only-child) {
      border-right-width: 0;
    }

    &:not(.hbtns-borders-between) > :last-child:not(:only-child) {
      border-left-width: 0;
    }
  }

  .vbtns {
    display: flex;
    flex-direction: column;
    padding: var(--wu-btns-padding);
    border-width: var(--wu-btns-border-width);
    border-radius: var(--wu-btns-border-radius);
    border-color: var(--wu-btns-border-color);
    background-color: var(--wu-btns-bg-color);


    & > * {
      border-radius: var(--wu-btns-border-radius);
    }

    & > :not(:first-child, :last-child) {
      border-top-width: 0;
      border-bottom-width: 0;
    }

    & > :first-child {
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
    }

    & > :last-child {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }

    &:not(.hbtns-borders-between) > :not(:first-child, :last-child) {
      border-radius: 0;
    }

    &:not(.hbtns-borders-between) > :first-child {
      border-bottom-width: 0;
    }

    &:not(.hbtns-borders-between) > :last-child {
      border-top-width: 0;
    }
  }
}

/* wu.component.card
Used to group and display content in a way that is easily readable.

# Usage

```html
<div class="card w-96 shadow-xl">
  <figure><img .../></figure>
  <div class="card-body">
    <h2 class="card-title">{title}</h2>
    <p>{desc}</p>
    <div class="card-actions justify-end">
      <button>{text}</button>
    </div>
  </div>
</div>
```
*/
@layer components {
  .card {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: --spacing(2);

    &:focus {
      outline-width: 0;
    }

    & figure {
      justify-content: center;
      align-items: center;
    }

    &.image-full {
      display: grid;

      &:before {
        position: relative;
        content: '';
        z-index: 1;
        opacity: 75%;
      }

      &:before, & > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }

      & > figure img {
        height: 100%;
        object-fit: cover;
      }

      &:where(figure) {
        overflow: hidden;
        border-radius: "inherit";
      }
    }

    &.image-full > .card-body {
      position: relative;
      z-index: 2;
      justify-content: center;
      align-items: center;
    }

    &:where(figure:first-child) {
      overflow: hidden;
			border-start-start-radius: "inherit";
			border-start-end-radius: "inherit";
			border-end-start-radius: "unset";
			border-end-end-radius: "unset";
    }

    &:where(figure:last-child) {
      overflow: hidden;
			border-start-start-radius: "unset";
			border-start-end-radius: "unset";
			border-end-start-radius: "inherit";
			border-end-end-radius: "inherit";
    }
  }

  .card-body {
    display: flex;
    flex: 1 1 auto;
    flex-direction: column;
    gap: --spacing(2);
    padding: 0 --spacing(4) --spacing(4) --spacing(4);

    :where(p) {
      flex-grow: 1;
    }
  }

  .card-title {
    justify-content: center;
    gap: --spacing(2);
    font-weight: 600;
    font-size: var(--text-xl);
    line-height: var(--text-xl--line-height);
  }

  .card-actions {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    gap: --spacing(2);
  }
}

/* wu.component.carousel
Shows images or content in a scrollable area.

# Usage

## Horizontal carousel
```html
<div class="carousel rounded-lg">
  <div class="carousel-item">
    <img .../>
  </div>
  <div class="carousel-item">
    <img .../>
  </div>
  <div class="carousel-item">
    <img .../>
  </div>
</div>
```

## Vertical carousel
```html
<div class="vcarousel rounded-lg">
  <div class="carousel-item">
    <img .../>
  </div>
  <div class="carousel-item">
    <img .../>
  </div>
  <div class="carousel-item">
    <img .../>
  </div>
</div>
```

## Carousel with snap-to-center
```html
<div class="carousel carousel-snap-center rounded-lg">
  <div class="carousel-item">
    <img .../>
  </div>
  <div class="carousel-item">
    <img .../>
  </div>
  <div class="carousel-item">
    <img .../>
  </div>
</div>
```

## Carousel with snap-to-end
```html
<div class="carousel carousel-snap-end rounded-lg">
  <div class="carousel-item">
    <img .../>
  </div>
  <div class="carousel-item">
    <img .../>
  </div>
  <div class="carousel-item">
    <img .../>
  </div>
</div>
```
*/
@layer components {
  .carousel {
    display: inline-flex;
    overflow-x: scroll;
    --tw-scroll-snap-strictness: mandatory;
    scroll-snap-type: x var(--tw-scroll-snap-strictness);
    scroll-behavior: smooth;

    -ms-overflow-style: none;
    scrollbar-width: none;
    &::-webkit-scrollbar {
      display: none;
    }
  }

  .vcarousel {
    display: inline-flex;
    flex-direction: column;
    overflow-y: scroll;
    --tw-scroll-snap-strictness: mandatory;
    scroll-snap-type: y var(--tw-scroll-snap-strictness);
    scroll-behavior: smooth;

    -ms-overflow-style: none;
    scrollbar-width: none;
    &::-webkit-scrollbar {
      display: none;
    }
  }

  .carousel-item {
    display: flex;
    flex: none;
    box-sizing: content-box;
    scroll-snap-align: start;
  }

  .carousel-snap-start {
    & .carousel-item {
      scroll-snap-align: start;
    }
  }

  .carousel-snap-center {
    & .carousel-item {
      scroll-snap-align: center;
    }
  }

  .carousel-snap-end {
    & .carousel-item {
      scroll-snap-align: end;
    }
  }
}

/* wu.component.chip 
Styling of small interactive elements for actions, selection, or filtering.

# Usage

```html
<span class="chip">{tag}</span>
```
*/
@layer components {
  .chip {
    padding-inline: --spacing(3);
    padding-block: --spacing(1);
    white-space: nowrap;
    cursor: pointer;
    font-size: var(--text-xs);
    line-height: var(--text-xs--line-height);
    border-radius: var(--radius-md);
    display: inline-flex;
    justify-content: center;
    align-items: center;
    gap: --spacing(2);

    @variant hocus {
      filter: brightness(115%);
    }

    &:disabled {
      opacity: 50%;
      cursor: not-allowed;
    }
  }
}

/* wu.component.code
Used to show a block of code in a box that looks like a code editor.

# Usage

## Code with no line numbers
```html
<div class="code">
  <pre>{code}</pre>
  <pre>{code}</pre>
  <pre data-prefix=">">{code}</pre>
</div>
```

## Code with line numbers
```html
<div class="code code-numbered">
  <pre>{code}</pre>
  <pre>{code}</pre>
  <pre>{code}</pre>
</div>
```
*/
@layer components {
  .code {
    position: relative;
    overflow-y: hidden;
    overflow-x: auto;
    width: 100%;
    padding-block: --spacing(5);
    border-radius: var(--radius-md);

    pre {
      padding-right: --spacing(5);

      &:before {
        display: inline-block;
        margin-right: 2ch;
        text-align: right;
      }
    }

    pre[data-prefix] {
      content: attr(data-prefix);
      width: --spacing(8);
      opacity: 50%;
    }
  }
}

@utility code-numbered-* {
  --wu-code-start: --value(integer);
  counter-reset: line calc(var(--code-start) - 1);
  & pre {
    &:before {
      content: counter(line);
      counter-increment: line;
      width: --spacing(8);
      opacity: 50%;
      margin-right: --spacing(4);
    }
  }
}

/* wu.component.footer
Contains logo, copyright notice, and links to other pages.

# Usage

## Normal footer
```html
<footer class="footer-table">
  <aside>
    {logo}
    <p>{summary}</p>
  </aside>
  <nav>
    <h6 class="footer-table-title">{title}</h6>
    <ul>
      <li><a href="#">{link}</a></li>
      <li><a href="#">{link}</a></li>
      <li><a href="#">{link}</a></li>
    </ul>
  </nav>
</footer>
```

## Centered footer
```html
<footer class="footer-table footer-table-center">
  <nav>
    <h6 class="footer-table-title">{title}</h6>
    <ul>
      <li><a href="#">{link}</a></li>
      <li><a href="#">{link}</a></li>
      <li><a href="#">{link}</a></li>
    </ul>
  </nav>
</footer>
```
*/
@layer components {
  .footer-table {
    display: grid;
    width: 100%;
    place-items: start;
    grid-auto-flow: row;
    row-gap: --spacing(10);
    column-gap: --spacing(4);
    font-size: var(--text-sm);
    line-height: var(--text-sm--line-height);

    @variant md {
      grid-auto-flow: column;
    }

    & > * {
      display: grid;
      place-items: start;
      gap: --spacing(2);
    }
  }

  .footer-table-center {
    place-items: center;
    text-align: center;

    @variant md {
      grid-auto-flow: row dense;
    }

    & > * {
      place-items: center;
    }
  }

  .footer-table-title {
    margin-bottom: --spacing(2);
    font-weight: 700;
    text-transform: uppercase;
    opacity: 50%;
  }
}

/* wu.component.forms
Styling of form elements.

# Usage

```html
<input type="text" class=move || ok.then_some("input-success").unwrap_or("input-error")/>
```
*/
@utility input-success {
  --wu-forms-input-bg-color: var(--color-success-200);
  --wu-forms-input-border-color: var(--color-success-500);
  --wu-forms-input-text-color: var(--color-success-700);

  --tw-inset-ring-shadow: 0 0 0 0;
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
	@variant focus-within {
	  --tw-inset-ring-shadow: inset 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
	  --tw-ring-color: var(--color-success-500);
	}

  &::placeholder {
    --wu-forms-input-placeholder-color: var(--color-success-content);
  }
}

@utility input-warning {
  --wu-forms-input-bg-color: var(--color-warning-200);
  --wu-forms-input-border-color: var(--color-warning-500);
  --wu-forms-input-text-color: var(--color-warning-700);

  --tw-inset-ring-shadow: 0 0 0 0;
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
	@variant focus-within {
	  --tw-inset-ring-shadow: inset 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
	  --tw-ring-color: var(--color-warning-500);
	}

  &::placeholder {
    --wu-forms-input-placeholder-color: var(--color-warning-content);
  }
}

@utility input-error {
	--wu-forms-input-bg-color: var(--color-error-200);
	--wu-forms-input-border-color: var(--color-error-500);
	--wu-forms-input-text-color: var(--color-error-700);

  --tw-inset-ring-shadow: 0 0 0 0;
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
	@variant focus-within {
	  --tw-inset-ring-shadow: inset 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
	  --tw-ring-color: var(--color-error-500);
	}

  &::placeholder {
    --wu-forms-input-placeholder-color: var(--color-color-content);
  }
}

/* wu.component.kbd
Used to display keyboard shortcuts.

# Usage

```html
<kbd class="kbd">Ctrl + L</kbd>
```
*/
@theme inline {
  --wu-kbd-padding-t: --spacing(1);
  --wu-kbd-padding-r: --spacing(2);
  --wu-kbd-padding-b: --spacing(1);
  --wu-kbd-padding-l: --spacing(2);
  --wu-kbd-padding: var(--wu-kbd-padding-t) var(--wu-kbd-padding-r) var(--wu-kbd-padding-b) var(--wu-kbd-padding-l);
  --wu-kbd-border-width-t: 1px;
  --wu-kbd-border-width-r: 1px;
  --wu-kbd-border-width-b: 4px;
  --wu-kbd-border-width-l: 1px;
  --wu-kbd-border-width: var(--wu-kbd-border-width-t) var(--wu-kbd-border-width-r) var(--wu-kbd-border-width-b) var(--wu-kbd-border-width-l);
  --wu-kbd-border-radius-t: var(--radius-lg);
  --wu-kbd-border-radius-r: var(--radius-lg);
  --wu-kbd-border-radius-b: var(--radius-lg);
  --wu-kbd-border-radius-l: var(--radius-lg);
  --wu-kbd-border-radius: var(--wu-kbd-border-radius-t) var(--wu-kbd-border-radius-r) var(--wu-kbd-border-radius-b) var(--wu-kbd-border-radius-l);
  --wu-kbd-bg-color: var(--color-surface-2);
  --wu-kbd-border-color: var(--color-surface-3);
}

@layer components {
  .kbd {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    border-width: var(--wu-kbd-border-width);
    min-height: 2.2rem;
    padding: var(--wu-kbd-padding);
    border-radius: var(--wu-kbd-border-radius);
    background-color: var(--wu-kbd-bg-color);
    border-color: var(--wu-kbd-border-color);
  }
}

/* wu.component.loading
Shows an animation to indicate that something is loading.

# Usage

```html
<span class="loading <the-type-of-anim-you-want>"/>
```
*/
@theme {
  --wu-loading-color: var(--color-content-emph);
  
  --wu-loading-anim-spinner: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-in-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
  --wu-loading-anim-dots: url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_qM83%7Banimation:spinner_8HQG 1.05s infinite%7D.spinner_oXPr%7Banimation-delay:.1s%7D.spinner_ZTLf%7Banimation-delay:.2s%7D@keyframes spinner_8HQG%7B0%25,57.14%25%7Banimation-timing-function:cubic-bezier(0.33,.66,.66,1);transform:translate(0)%7D28.57%25%7Banimation-timing-function:cubic-bezier(0.33,0,.66,.33);transform:translateY(-6px)%7D100%25%7Btransform:translate(0)%7D%7D%3C/style%3E%3Ccircle class='spinner_qM83' cx='4' cy='12' r='3'/%3E%3Ccircle class='spinner_qM83 spinner_oXPr' cx='12' cy='12' r='3'/%3E%3Ccircle class='spinner_qM83 spinner_ZTLf' cx='20' cy='12' r='3'/%3E%3C/svg%3E");
  --wu-loading-anim-ring: url("data:image/svg+xml,%3Csvg width='44' height='44' viewBox='0 0 44 44' xmlns='http://www.w3.org/2000/svg' stroke='%23fff'%3E%3Cg fill='none' fill-rule='evenodd' stroke-width='2'%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='0s' dur='1.8s' values='1; 20' calcMode='spline' keyTimes='0; 1' keySplines='0.165, 0.84, 0.44, 1' repeatCount='indefinite' /%3E%3Canimate attributeName='stroke-opacity' begin='0s' dur='1.8s' values='1; 0' calcMode='spline' keyTimes='0; 1' keySplines='0.3, 0.61, 0.355, 1' repeatCount='indefinite' /%3E%3C/circle%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='-0.9s' dur='1.8s' values='1; 20' calcMode='spline' keyTimes='0; 1' keySplines='0.165, 0.84, 0.44, 1' repeatCount='indefinite' /%3E%3Canimate attributeName='stroke-opacity' begin='-0.9s' dur='1.8s' values='1; 0' calcMode='spline' keyTimes='0; 1' keySplines='0.3, 0.61, 0.355, 1' repeatCount='indefinite' /%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
  --wu-loading-anim-bars: url("data:image/svg+xml,%0A%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_rXNP%7Banimation:spinner_YeBj .8s infinite%7D@keyframes spinner_YeBj%7B0%25%7Banimation-timing-function:cubic-bezier(0.33,0,.66,.33);cy:5px%7D46.875%25%7Bcy:20px;rx:4px;ry:4px%7D50%25%7Banimation-timing-function:cubic-bezier(0.33,.66,.66,1);cy:20.5px;rx:4.8px;ry:3px%7D53.125%25%7Brx:4px;ry:4px%7D100%25%7Bcy:5px%7D%7D%3C/style%3E%3Cellipse class='spinner_rXNP' cx='12' cy='5' rx='4' ry='4'/%3E%3C/svg%3E");
  --wu-loading-anim-infinity: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' style='shape-rendering: auto;' width='200px' height='200px' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E%3Cpath fill='none' stroke='%230a0a0a' stroke-width='10' stroke-dasharray='205.271142578125 51.317785644531256' d='M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z' stroke-linecap='round' style='transform:scale(0.8);transform-origin:50px 50px'%3E%3Canimate attributeName='stroke-dashoffset' repeatCount='indefinite' dur='2s' keyTimes='0;1' values='0;256.58892822265625'%3E%3C/animate%3E%3C/path%3E%3C/svg%3E");
}

@layer components {
  .loading {
    pointer-events: none;
    display: inline-block;
    width: --spacing(6);
    height: --spacing(6);
    mask-size: 100%;
    mask-repeat: no-repeat;
    mask-position: center;
    mask-image: var(--wu-loading-anim-spinner);
    background-color: var(--wu-loading-color);
  }
}

@utility loading-* {
  mask-image: --value(--wu-loading-anim-*);
}

/* wu.component.overlay
Used to overlay a new plane over an existing one.

# Usage

```html
<div class="overlay-container">
  <div class="overlay overlay-container">
    <div class="overlay">
      <p>{some_content}</p>
    </div>
  </div>
  <div class="overlay overlay-container">
    <div class="overlay">
      <p>{some_content}</p>
    </div>
  </div>
</div>
```
*/
@layer components {
  .overlay-container {
    display: grid;
    grid-template-columns: 1fr;
    pointer-events: none !important;
    & > * {
      pointer-events: auto;
    }
  }

  .overlay {
    grid-row-start: 1;
    grid-column-start: 1;
    pointer-events: none !important;
    & > * {
      pointer-events: auto;
    }
  }

  .overlay-viewport-container {
    display: grid;
    grid-template-columns: 1fr;
    pointer-events: none !important;
    position: fixed;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    & > * {
      pointer-events: auto;
    }
  }
}

/* wu.component.placeholder
Used as placeholders while actual content is loading in the background.

# Usage

```html
<section class="card w-full">
	<div class="p-4 space-y-4">
		<div class="placeholder size-4" />
		<div class="grid grid-cols-3 gap-8">
			<div class="placeholder" />
			<div class="placeholder" />
			<div class="placeholder" />
		</div>
		<div class="grid grid-cols-4 gap-4">
			<div class="placeholder" />
			<div class="placeholder" />
			<div class="placeholder" />
			<div class="placeholder" />
		</div>
	</div>
</section>
```
*/
@layer components {
  .placeholder {
    background-color: --alpha(var(--color-content-noemph) / 10%);
    height: --spacing(5);
    border-radius: calc(infinity * 1px);

    animation: var(--animate-pulse);
  }
}

/* wu.component.progress
Used to show the progress of a task or to show the passing of time.

# Usage

```html
<div class="radial radial-size-4" style:('--wu-radial-value', perc)>{perc}</div>
```
*/
@layer components {
  .radial {
    --wu-radial-value: 0;
    --wu-radial-size: 5rem;
    --wu-radial-thickness: calc(var(--wu-radial-size) / 10);
    width: var(--wu-radial-size);
    height: var(--wu-radial-size);
    background-color: transparent;
    border-radius: calc(infinity * 1px);
    display: inline-grid;
    place-content: center;
    position: relative;
    vertical-align: middle;
    box-sizing: content-box;

    &::-moz-progress-bar {
      background-color: transparent;
      appearance: none;
    }

    &::-webkit-progress-value {
      background-color: transparent;
      appearance: none;
    }

    &::-webkit-progress-bar {
      background-color: transparent;
      appearance: none;
    }

    &:before {
      position: absolute;
      border-radius: calc(infinity * 1px);
      content: '';
      z-index: 2;
    }

    &:before {
      inset: 0;
      background: conic-gradient(currentColor calc(var(--wu-radial-value) * 1%), #0000 0);
      -webkit-mask: radial-gradient(farthest-side, #0000 calc(99% - var(--wu-radial-thickness)), #000 calc(100% - var(--wu-radial-thickness)));
      mask: radial-gradient(farthest-side, #0000 calc(99% - var(--wu-radial-thickness)), #000 calc(100% - var(--wu-radial-thickness)));
    }
  }

  .radial-rounded {
    --wu-radial-value: 0;
    --wu-radial-size: 5rem;
    --wu-radial-thickness: calc(var(--wu-radial-size) / 10);
    width: var(--wu-radial-size);
    height: var(--wu-radial-size);
    background-color: transparent;
    border-radius: calc(infinity * 1px);
    display: inline-grid;
    place-content: center;
    position: relative;
    vertical-align: middle;
    box-sizing: content-box;

    &::-moz-progress-bar {
      background-color: transparent;
      appearance: none;
    }

    &::-webkit-progress-value {
      background-color: transparent;
      appearance: none;
    }

    &::-webkit-progress-bar {
      background-color: transparent;
      appearance: none;
    }

    &:before, &:after {
      position: absolute;
      border-radius: calc(infinity * 1px);
      content: '';
      z-index: 2;
    }

    &:before {
      inset: 0;
  		background: radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--wu-radial-thickness) var(--wu-radial-thickness) no-repeat, conic-gradient(currentColor calc(var(--wu-radial-value) * 1%), #0000 0);
  		-webkit-mask: radial-gradient(farthest-side, #0000 calc(99% - var(--wu-radial-thickness)), #000 calc(100% - var(--wu-radial-thickness)));
  		mask: radial-gradient(farthest-side, #0000 calc(99% - var(--wu-radial-thickness)), #000 calc(100% - var(--wu-radial-thickness)));
      opacity: calc(100% * var(--wu-radial-value));
    }

    &:after {
      background-color: currentColor;
      inset: calc(50% - var(--wu-radial-thickness) / 2);
      opacity: calc(100% * var(--wu-radial-value));
      transform: rotate(calc(var(--wu-radial-value) * 3.6deg - 90deg)) translate(calc(var(--wu-radial-size) / 2 - 50%));
    }
  }

  .radial-bg {
    --wu-radial-size: 5rem;
    --wu-radial-thickness: calc(var(--wu-radial-size) / 10);
    width: var(--wu-radial-size);
    height: var(--wu-radial-size);
    background-color: transparent;
    border-radius: calc(infinity * 1px);
    display: inline-grid;
    place-content: center;
    position: relative;
    vertical-align: middle;
    box-sizing: content-box;

    &::-moz-progress-bar {
      background-color: transparent;
      appearance: none;
    }

    &::-webkit-progress-value {
      background-color: transparent;
      appearance: none;
    }

    &::-webkit-progress-bar {
      background-color: transparent;
      appearance: none;
    }

    &:before, &:after {
      position: absolute;
      border-radius: calc(infinity * 1px);
      content: '';
      z-index: 1;
    }

    &:before {
      inset: 0;
      background: radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--wu-radial-thickness) var(--wu-radial-thickness) no-repeat, conic-gradient(currentColor 100%, #0000 0);
      -webkit-mask: radial-gradient(farthest-side, #0000 calc(99% - var(--wu-radial-thickness)), #000 calc(100% - var(--wu-radial-thickness)));
      mask: radial-gradient(farthest-side, #0000 calc(99% - var(--wu-radial-thickness)), #000 calc(100% - var(--wu-radial-thickness)));
    }

    &:after {
      background-color: currentColor;
      inset: calc(50% - var(--wu-radial-thickness) / 2);
      transform: rotate(calc(100 * 3.6deg - 90deg)) translate(calc(var(--wu-radial-size) / 2 - 50%));
    }
  }
}

@utility radial-size-* {
  --wu-radial-size: --value([length]);
  --wu-radial-size: calc(var(--spacing) * --value(integer));
}

@utility radial-thickness-* {
  --wu-radial-thickness: --value([length]);
  --wu-radial-thickness: calc(var(--spacing) * --value(integer));
}

/* wu.component.steps
Used to show a list of steps in a process.

# Usage

## Horizontal steps
```html
<ul class="hsteps">
  <li class="step step-active">Register</li>
  <li class="step step-active">Choose plan</li>
  <li class="step">Purchase</li>
  <li class="step">Receive Product</li>
</ul>
```

## Vertical steps
```html
<ul class="vsteps">
  <li class="step step-active">Register</li>
  <li class="step step-active">Choose plan</li>
  <li class="step">Purchase</li>
  <li class="step">Receive Product</li>
</ul>
```
*/
@theme inline {
  --wu-steps-inactive-bg-color: var(--color-surface-2);
  --wu-steps-inactive-border-color: var(--color-surface-3);
  --wu-steps-inactive-text-color: var(--color-content-noemph);
  --wu-steps-active-bg-color: var(--color-primary);
  --wu-steps-active-border-color: var(--color-primary-darker);
  --wu-steps-active-text-color: var(--color-primary-content);
  --wu-steps-current-bg-color: var(--wu-steps-inactive-bg-color);
  --wu-steps-current-border-color: var(--wu-steps-inactive-border-color);
  --wu-steps-current-text-color: var(--wu-steps-inactive-text-color);
}

@layer components {
  .hsteps {
    display: inline-grid;
    grid-auto-flow: column;
    overflow-y: hidden;
    overflow-x: auto;
    grid-auto-columns: 1fr;
    counter-reset: step;
    .step {
      display: grid;
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-template-rows: repeat(2, minmax(0, 1fr));
      place-items: center;
      text-align: center;
      grid-template-rows: 40px 1fr;
      grid-template-columns: auto;
      min-width: 4rem;
      &:before {
        height: --spacing(2);
        width: 100%;
        top: 0;
        grid-column-start: 1;
        grid-row-start: 1;
        margin-inline-start: -100%;
        border-block-width: 1px;
      }
      &:after {
        border-width: 1px;
      }
    }
  }

  .vsteps {
    display: inline-grid;
    grid-auto-flow: row;
    overflow-y: auto;
    overflow-x: hidden;
    grid-auto-rows: 1fr;
    counter-reset: step;
    .step {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
      grid-template-rows: repeat(1, minmax(0, 1fr));
      gap: 0.5rem;
      grid-template-columns: 40px 1fr;
      grid-template-rows: auto;
      min-height: 4rem;
      justify-items: start;
      border-inline-width: 1px;
      &:before {
        width: --spacing(2);
        height: 100%;
        top: 0;
        grid-column-start: 1;
        grid-row-start: 1;
        --tw-translate-x: -50%;
        --tw-translate-y: -50%;
        translate: var(--tw-translate-x) var(--tw-translate-y);
        margin-inline-start: 50%;
        border-inline-width: 1px;

        @variant rtl {
          --tw-translate-x: 50%;
        }
      }
      &:after {
        border-width: 1px;
      }
    }
  }

  .step {
    &:before {
      content: "";
      background-color: var(--wu-steps-inactive-bg-color);
      border-color: var(--wu-steps-inactive-border-color);
    }
    &:after {
      content: counter(step);
      counter-increment: step;
      z-index: 1;
      background-color: var(--wu-steps-inactive-bg-color);
      border-color: var(--wu-steps-inactive-border-color);
      color: var(--wu-steps-inactive-text-color);
      position: relative;
      display: grid;
      grid-column-start: 1;
      grid-row-start: 1;
      width: --spacing(8);
      height: --spacing(8);
      place-items: center;
      place-self: center;
      border-radius: calc(infinity * 1px);
    }
    &:first-child:before {
      content: none;
    }
    &[data-content]:after {
      content: attr(data-content);
      color: var(--wu-steps-inactive-text-color);
    }
  }

  .step-active {
    &:before {
      background-color: var(--wu-steps-active-bg-color);
      border-color: var(--wu-steps-active-border-color);
    }
    &:after {
      background-color: var(--wu-steps-active-bg-color);
      border-color: var(--wu-steps-active-border-color);
      color: var(--wu-steps-active-text-color);
    }
    &[data-content]:after {
      color: var(--wu-steps-active-text-color);
    }
  }

  .step-current {
    &:before {
      background-color: var(--wu-steps-current-bg-color);
      border-color: var(--wu-steps-current-border-color);
    }
    &:after {
      background-color: var(--wu-steps-current-bg-color);
      border-color: var(--wu-steps-current-border-color);
      color: var(--wu-steps-current-text-color);
    }
    &[data-content]:after {
      color: var(--wu-steps-current-text-color);
    }
  }
}

/* wu.utility.scroll-shadow
Used to enable visible shadows when a container overflows and is scrollable.

# Usage

```html
<div class="scroll-shadow-y scroll-shadow-x max-w-40 max-h-40 overflow-auto">
  ...
</div>
```
*/
@theme inline {
  --wu-scroll-shadow-bg: var(--color-surface-1);
}

@utility scroll-shadow-x {
  background:
      /* Shadow Cover LEFT */
      linear-gradient(
          to right,
          var(--wu-scroll-shadow-bg) 30%,
          rgba(255, 255, 255, 0)
      ) left center,
  
      /* Shadow Cover RIGHT */
      linear-gradient(
          to right,
          rgba(255, 255, 255, 0), 
          var(--wu-scroll-shadow-bg) 70%
      ) right center,
  
      /* Shadow LEFT */
      radial-gradient(
          farthest-side at 0% 50%,
          rgba(0, 0, 0, 0.2),
          rgba(0, 0, 0, 0)
      ) left center,
  
      /* Shadow RIGHT */
      radial-gradient(
          farthest-side at 100% 50%,
          rgba(0, 0, 0, 0.2),
          rgba(0, 0, 0, 0)
      ) right center;

  background-repeat: no-repeat;
  background-size: 40px 300%, 40px 300%, 14px 300%, 14px 300%;
  background-attachment: local, local, scroll, scroll;
}

@utility scroll-shadow-y {
  background:
      /* Shadow Cover TOP */
      linear-gradient(
          var(--wu-scroll-shadow-bg) 30%,
          rgba(255, 255, 255, 0)
      ) center top,
  
      /* Shadow Cover BOTTOM */
      linear-gradient(
          rgba(255, 255, 255, 0), 
          var(--wu-scroll-shadow-bg) 70%
      ) center bottom,
  
      /* Shadow TOP */
      radial-gradient(
          farthest-side at 50% 0,
          rgba(0, 0, 0, 0.2),
          rgba(0, 0, 0, 0)
      ) center top,
  
      /* Shadow BOTTOM */
      radial-gradient(
          farthest-side at 50% 100%,
          rgba(0, 0, 0, 0.4),
          rgba(0, 0, 0, 0)
      ) center bottom;

  background-repeat: no-repeat;
  background-size: 100% 40px, 100% 40px, 100% 14px, 100% 14px;
  background-attachment: local, local, scroll, scroll;
}

@utility scroll-shadow-* {
  --wu-scroll-shadow-bg: --value(--color-*);
}

/* wu.component.tabs
Used to show a list of links in a tabbed format.

# Usage

```html
<div role="tablist" class="tabs">
  <a role="tab" class="tab">Tab 1</a>
  <a role="tab" class="tab tab-active">Tab 2</a>
  <a role="tab" class="tab">Tab 3</a>
</div>
```
*/
@theme inline {
  --wu-tabs-bg-color: transparent;
  --wu-tabs-border-color: transparent;
  --wu-tabs-text-color: var(--color-content-noemph);
  --wu-tabs-active-bg-color: transparent;
  --wu-tabs-active-border-color: transparent;
  --wu-tabs-active-text-color: var(--color-content-emph);
}

/* TODO: Consider entire rework of this component */
@layer components {
  .tabs {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-end;

    & > .tab {
      border-color: var(--wu-tabs-border-color);
    }
  }

  .tab {
    color: --alpha(var(--wu-tabs-text-color) / 50%);
    padding-inline: --spacing(4);
    padding-block: --spacing(2);
    cursor: pointer;

    &.tab-active:not(.tab-disabled, [disabled]) {
      border-color: --alpha(var(--wu-tabs-border-color) / 100%);
      color: --alpha(var(--wu-tabs-text-color) / 100%);
    }

    &:not(.tab-active, .tab-disabled, [disabled]) {
      @variant hocus {
        color: --alpha(var(--wu-tabs-text-color) / 75%);
      }
    }

    &:focus {
      outline-width: 0;
    }

    &:focus-visible {
      outline-width: 2px;
      outline-color: currentColor;
      outline-offset: -3px;
    }
    &[disabled] {
      color: --alpha(var(--wu-tabs-text-color) / 25%);
      cursor: not-allowed;
    }
    @media (hover: hover) {
      &[disabled], &[disabled]:hover {
        color: --alpha(var(--wu-tabs-text-color) / 25%);
        cursor: not-allowed;
      }
    }
  }

  .tab-disabled {
    color: --alpha(var(--wu-tabs-text-color) / 25%);
    cursor: not-allowed;
  }

  .tabs-bordered > .tab {
    border-bottom-width: 2px;
    border-color: --alpha(var(--wu-tabs-border-color) / 20%);
  }

  .tabs-lifted > .tab {
    border-bottom-width: 2px;
    &.tab-active:not(.tab-disabled, [disabled]) {
      border-width: 2px 2px 0 2px;
      border-top-left-radius: var(--radius-lg);
      border-top-right-radius: var(--radius-lg);
    }
  }

  .tabs-boxed {
    background-color: --alpha(var(--wu-tabs-bg-color) / 20%);
    &.tab-active:not(.tab-disabled, [disabled]) {
      background-color: var(--wu-tabs-active-bg-color);
    }
  }
}

/* wu.component.window
Shows a box that looks like an operating system window.

# Usage

```html
<div class="window border border-base-300">
  <div class="flex justify-center px-4 py-16 border-t border-base-300">Hello!</div>
</div>
```
*/
@layer components {
  .window {
    position: relative;
    overflow-y: hidden;
    overflow-x: auto;
    padding-top: --spacing(5);
    border-radius: var(--radius-md);
    &:before {
      content: '';
      display: block;
      margin-bottom: --spacing(4);
      width: --spacing(3);
      height: --spacing(3);
      border-radius: calc(infinity * 1px);
      opacity: 100%;
      box-shadow: 1.4em 0 rgba(225, 0, 11, 0.8), 2.8em 0 rgba(222, 172, 10, 0.8), 4.2em 0 rgba(71, 172, 7, 0.8);
    }
  }

  .window-grayscale {
    position: relative;
    overflow-y: hidden;
    overflow-x: auto;
    padding-top: --spacing(5);
    border-radius: var(--radius-md);
    &:before {
      content: '';
      display: block;
      margin-bottom: --spacing(4);
      width: --spacing(3);
      height: --spacing(3);
      border-radius: calc(infinity * 1px);
      opacity: 100%;
      box-shadow: 1.4em 0, 2.8em 0, 4.2em 0;
    }
  }
}

/* wu.component.icons
Shows an animation to indicate that something is loading.

# Categorization
- o - outline
- s - solid
- m - mini
- u - micro

# Usage

```html
<span class="loading <the-type-of-anim-you-want>"/>
```
*/
@theme {
  --wu-icon-color: var(--color-content-emph);
  
  /* outline icons */
  --wu-icon-outline-info-circle: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z'/%3E%3C/svg%3E");
  --wu-icon-outline-exclamation-circle: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M12 9v3.75m9-.75a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 3.75h.008v.008H12v-.008Z'/%3E%3C/svg%3E");
  --wu-icon-outline-exclamation-triangle: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z'/%3E%3C/svg%3E");
  --wu-icon-outline-exclamation-shield: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M12 9v3.75m0-10.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.75c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.57-.598-3.75h-.152c-3.196 0-6.1-1.25-8.25-3.286Zm0 13.036h.008v.008H12v-.008Z'/%3E%3C/svg%3E");
  --wu-icon-outline-arrow-right-end-on-rect: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M8.25 9V5.25A2.25 2.25 0 0 1 10.5 3h6a2.25 2.25 0 0 1 2.25 2.25v13.5A2.25 2.25 0 0 1 16.5 21h-6a2.25 2.25 0 0 1-2.25-2.25V15M12 9l3 3m0 0-3 3m3-3H2.25'/%3E%3C/svg%3E");
  --wu-icon-outline-bars-3: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5'/%3E%3C/svg%3E");
  --wu-icon-outline-chevron-down: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='m19.5 8.25-7.5 7.5-7.5-7.5'/%3E%3C/svg%3E");
  --wu-icon-outline-cog-6: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869l.214-1.28Z'/%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z'/%3E%3C/svg%3E");
  --wu-icon-outline-cog: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M4.5 12a7.5 7.5 0 0 0 15 0m-15 0a7.5 7.5 0 1 1 15 0m-15 0H3m16.5 0H21m-1.5 0H12m-8.457 3.077 1.41-.513m14.095-5.13 1.41-.513M5.106 17.785l1.15-.964m11.49-9.642 1.149-.964M7.501 19.795l.75-1.3m7.5-12.99.75-1.3m-6.063 16.658.26-1.477m2.605-14.772.26-1.477m0 17.726-.26-1.477M10.698 4.614l-.26-1.477M16.5 19.794l-.75-1.299M7.5 4.205 12 12m6.894 5.785-1.149-.964M6.256 7.178l-1.15-.964m15.352 8.864-1.41-.513M4.954 9.435l-1.41-.514M12.002 12l-3.75 6.495'/%3E%3C/svg%3E");
  --wu-icon-outline-console: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='m6.75 7.5 3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0 0 21 18V6a2.25 2.25 0 0 0-2.25-2.25H5.25A2.25 2.25 0 0 0 3 6v12a2.25 2.25 0 0 0 2.25 2.25Z'/%3E%3C/svg%3E");
  --wu-icon-outline-eye: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z'/%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z'/%3E%3C/svg%3E");
  --wu-icon-outline-flag: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M3 3v1.5M3 21v-6m0 0 2.77-.693a9 9 0 0 1 6.208.682l.108.054a9 9 0 0 0 6.086.71l3.114-.732a48.524 48.524 0 0 1-.005-10.499l-3.11.732a9 9 0 0 1-6.085-.711l-.108-.054a9 9 0 0 0-6.208-.682L3 4.5M3 15V4.5'/%3E%3C/svg%3E");
  --wu-icon-outline-lock-closed: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M16.5 10.5V6.75a4.5 4.5 0 1 0-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 0 0 2.25-2.25v-6.75a2.25 2.25 0 0 0-2.25-2.25H6.75a2.25 2.25 0 0 0-2.25 2.25v6.75a2.25 2.25 0 0 0 2.25 2.25Z'/%3E%3C/svg%3E");
  --wu-icon-outline-lock-open: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M13.5 10.5V6.75a4.5 4.5 0 1 1 9 0v3.75M3.75 21.75h10.5a2.25 2.25 0 0 0 2.25-2.25v-6.75a2.25 2.25 0 0 0-2.25-2.25H3.75a2.25 2.25 0 0 0-2.25 2.25v6.75a2.25 2.25 0 0 0 2.25 2.25Z'/%3E%3C/svg%3E");
  --wu-icon-outline-moon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z'/%3E%3C/svg%3E");
  --wu-icon-outline-no-symbol: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M18.364 18.364A9 9 0 0 0 5.636 5.636m12.728 12.728A9 9 0 0 1 5.636 5.636m12.728 12.728L5.636 5.636'/%3E%3C/svg%3E");
  --wu-icon-outline-book-open: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25'/%3E%3C/svg%3E");
  --wu-icon-outline-question-mark-circle: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 5.25h.008v.008H12v-.008Z'/%3E%3C/svg%3E");
  --wu-icon-outline-paper-airplane: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5'/%3E%3C/svg%3E");
  --wu-icon-outline-sun: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z'/%3E%3C/svg%3E");
  --wu-icon-outline-user: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z'/%3E%3C/svg%3E");
  --wu-icon-outline-user-circle: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z'/%3E%3C/svg%3E");
  --wu-icon-outline-wrench: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M21.75 6.75a4.5 4.5 0 0 1-4.884 4.484c-1.076-.091-2.264.071-2.95.904l-7.152 8.684a2.548 2.548 0 1 1-3.586-3.586l8.684-7.152c.833-.686.995-1.874.904-2.95a4.5 4.5 0 0 1 6.336-4.486l-3.276 3.276a3.004 3.004 0 0 0 2.25 2.25l3.276-3.276c.256.565.398 1.192.398 1.852Z'/%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M4.867 19.125h.008v.008h-.008v-.008Z'/%3E%3C/svg%3E");
  --wu-icon-outline-wrench-screwdriver: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M11.42 15.17 17.25 21A2.652 2.652 0 0 0 21 17.25l-5.877-5.877M11.42 15.17l2.496-3.03c.317-.384.74-.626 1.208-.766M11.42 15.17l-4.655 5.653a2.548 2.548 0 1 1-3.586-3.586l6.837-5.63m5.108-.233c.55-.164 1.163-.188 1.743-.14a4.5 4.5 0 0 0 4.486-6.336l-3.276 3.277a3.004 3.004 0 0 1-2.25-2.25l3.276-3.276a4.5 4.5 0 0 0-6.336 4.486c.091 1.076-.071 2.264-.904 2.95l-.102.085m-1.745 1.437L5.909 7.5H4.5L2.25 3.75l1.5-1.5L7.5 4.5v1.409l4.26 4.26m-1.745 1.437 1.745-1.437m6.615 8.206L15.75 15.75M4.867 19.125h.008v.008h-.008v-.008Z'/%3E%3C/svg%3E");
  --wu-icon-outline-x-mark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M6 18 18 6M6 6l12 12'/%3E%3C/svg%3E");
  --wu-icon-outline-x-circle: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z'/%3E%3C/svg%3E");
  --wu-icon-outline-plus: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M12 4.5v15m7.5-7.5h-15'/%3E%3C/svg%3E");
  --wu-icon-outline-arrow-path: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99'/%3E%3C/svg%3E");
  --wu-icon-outline-arrow-top-right-on-square: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25'/%3E%3C/svg%3E");
  --wu-icon-outline-adjustment-horizontal: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M10.5 6h9.75M10.5 6a1.5 1.5 0 1 1-3 0m3 0a1.5 1.5 0 1 0-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-9.75 0h9.75'/%3E%3C/svg%3E");
  --wu-icon-outline-boot-kick: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='currentColor' d='m364.2 78.46l-61.7 74.74l-18.7-56.06l-20.6 56.06c2.4 1.3 4.8 2.7 7.2 4c-15.9 1.1-32.2 5.8-48.3 14.7c142.1 0 224.3 149.5 119.6 261.6c17.1-11.6 30.8-24.5 41.5-38.1c-.1.3-.2.5-.3.8l54.2 18.6l-26.2-56h67.3L424 321.4l69.1-37.4l-71-18.7l67.3-74.7l-89.7 18.7l46.7-93.5l-91.6 56.1zM139 102.7c-1.6 0-3.4.7-6 2.2l-2 1.1h-2.3c-38.05 0-78.77 16.3-109.11 68.8c-2.93 24.6 3.45 35 11.59 48.5c7.41 12.4 16.35 27.4 16.85 51.8c22.72-.4 52.37-3.6 82.27-31.7l-20.7-115l71.7 67.2c4.2-5.1 8.6-8.8 11.9-11.7s5.5-5 7-8c-19.1-12.4-30-34.4-40.1-50.8c-5.6-9.1-11-16.5-15.2-19.7c-2.2-1.6-3.6-2.6-5.3-2.7zm-2.4 75.3l12.9 71.6l-3.3 3.3C127 272.1 107 282 88.73 287.2L138 358.8l28.1 56c10.1 4.6 27.7 3.5 48.4-1.5l-3.6-35.8l33.3 26.6c59.1-21.7 126.1-65.4 123.7-101.4c-24.3-51.9-86.9-103.8-139.1-51.9c-14.2 16.5-22.3 34.9-30.5 67.4c1.7-32.8 1.9-51.3 12-67.9l-17-41.2c-.9 1.2-1.7 2.6-2.5 4.2l-5.3 10.6z'/%3E%3C/svg%3E");
  --wu-icon-outline-hammer: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-1.5 -1.5 24 24'%3E%3Cpath fill='currentColor' d='m2.536 8.9l2.828 2.828l6.364-6.364l-2.829-2.828zm12.727 5.656l-4.95-4.95l-.706.708l4.95 4.95zm1.415 1.415l-.707.707l1.767 1.767a.5.5 0 0 0 .707-.707zM6.01 2.596L7.485 1.12a2 2 0 0 1 2.829 0l2.828 2.829a2 2 0 0 1 0 2.828l-1.414 1.414l8.132 8.132a2.5 2.5 0 1 1-3.536 3.536l-8.132-8.132l-1.414 1.414a2 2 0 0 1-2.828 0l-2.83-2.827a2 2 0 0 1 0-2.829l1.475-1.474a1.5 1.5 0 0 1 .293-1.708L4.303 2.89a1.5 1.5 0 0 1 1.708-.293z'/%3E%3C/svg%3E");
  --wu-icon-outline-trash: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='size-6'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0'/%3E%3C/svg%3E");
  --wu-icon-outline-check: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='size-6'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='m4.5 12.75 6 6 9-13.5'/%3E%3C/svg%3E");
  --wu-icon-outline-arrow-left: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='size-6'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18' /%3E%3C/svg%3E");
  --wu-icon-outline-arrow-right: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='size-6'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3' /%3E%3C/svg%3E");
  --wu-icon-outline-minus: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='size-6'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M5 12h14' /%3E%3C/svg%3E");

  /* solid icons */

  /* mini icons */

  /* micro icons */
}

@layer components {
  .icon {
    pointer-events: none;
    width: --spacing(6);
    height: --spacing(6);
    display: inline-block;
    mask-size: 100%;
    mask-repeat: no-repeat;
    mask-position: center;
    background-color: var(--wu-icon-color);
    text-decoration-color: var(--wu-icon-color);
    color: var(--wu-icon-color);
    fill: var(--wu-icon-color);
    stroke: var(--wu-icon-color);
  }
}

@utility icon-* {
  --wu-icon-color: --value(--color-*);
}

@utility i-o-* {
  mask-image: --value(--wu-icon-outline-*);
}
